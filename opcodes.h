/*      SC      A Spreadsheet Calculator
 *              Expression node definitions.
 *
 *              original by Charlie Gordon: August, 2021
 *              $Revision: 8.1 $
 */

#ifndef __
#define __(op,min,max,efun,arg,str,desc)
#endif
#ifndef LO  /* Libre Office specific */
#define LO(op,min,max,efun,arg,str,desc)
#endif
#ifndef XX
#define XX(op,min,max,efun,arg,str,desc)  OP(op,min,max,efun,arg,str,desc)
#endif

/* dummy nodes for ancillary use (@EXT) */
OP( OP_DUMMY,           -2, 2, NULL, NULL, NULL, NULL)

/* constants and references */
OP( OP__NUMBER,         -2, 0, eval__number, NULL, NULL, NULL)
OP( OP__ERROR,          -2, 0, eval__error, NULL, NULL, NULL)
OP( OP__STRING,         -2, 0, eval__string, NULL, NULL, NULL)
OP( OP__VAR,            -2, 0, eval__var, NULL, NULL, NULL)
OP( OP__RANGE,          -2, 0, eval__range, NULL, NULL, NULL)

/* unary / binary operators */
LO( OP_ADD,             2, 2, NULL, NULL, "ADD(value1, value2)", "Returns the sum of two numbers. Equivalent to the `+` operator")
LO( OP_CONCAT,          2, 2, NULL, NULL, "CONCAT(value1, value2)", "Returns the concatenation of two values. Equivalent to the `&` operator")
LO( OP_DIVIDE,          2, 2, NULL, NULL, "DIVIDE(dividend, divisor)", "Returns one number divided by another. Equivalent to the `/` operator")
LO( OP_EQ,              2, 2, NULL, NULL, "EQ(value1, value2)", "Returns `TRUE` if two specified values are equal and `FALSE` otherwise. Equivalent to the `=` operator")
LO( OP_GT,              2, 2, NULL, NULL, "GT(value1, value2)", "Returns `TRUE` if the first argument is strictly greater than the second, and `FALSE` otherwise. Equivalent to the `>` operator")
LO( OP_GTE,             2, 2, NULL, NULL, "GTE(value1, value2)", "Returns `TRUE` if the first argument is greater than or equal to the second, and `FALSE` otherwise. Equivalent to the `>=` operator")
LO( OP_ISBETWEEN,       5, 5, NULL, NULL, "ISBETWEEN(value_to_compare, lower_value, upper_value, lower_value_is_inclusive, upper_value_is_inclusive)", "Checks whether a provided number is between two other numbers either inclusively or exclusively")
LO( OP_LT,              2, 2, NULL, NULL, "LT(value1, value2)", "Returns `TRUE` if the first argument is strictly less than the second, and `FALSE` otherwise. Equivalent to the `<` operator")
LO( OP_LTE,             2, 2, NULL, NULL, "LTE(value1, value2)", "Returns `TRUE` if the first argument is less than or equal to the second, and `FALSE` otherwise. Equivalent to the `<=` operator")
LO( OP_MINUS,           2, 2, NULL, NULL, "MINUS(value1, value2)", "Returns the difference of two numbers. Equivalent to the `-` operator")
LO( OP_MULTIPLY,        2, 2, NULL, NULL, "MULTIPLY(factor1, factor2)", "Returns the product of two numbers. Equivalent to the `*` operator")
LO( OP_NE,              2, 2, NULL, NULL, "NE(value1, value2)", "Returns `TRUE` if two specified values are not equal and `FALSE` otherwise. Equivalent to the `<>` operator")
LO( OP_POW,             2, 2, NULL, NULL, "POW(base, exponent)", "Returns a number raised to a power")
LO( OP_UMINUS,          1, 1, NULL, NULL, "UMINUS(value)", "Returns a number with the sign reversed")
LO( OP_UNARY_PERCENT,   1, 1, NULL, NULL, "UNARY_PERCENT(percentage)", "Returns a value interpreted as a percentage; that is, `UNARY_PERCENT(100)` equals `1`")
LO( OP_UNIQUE,          3, 3, NULL, NULL, "UNIQUE(range, by_column, exactly_once)", "Returns unique rows in the provided source range, discarding duplicates. Rows are returned in the order in which they first appear in the source range")
LO( OP_UPLUS,           1, 1, NULL, NULL, "UPLUS(value)", "Returns a specified number, unchanged")

OP( OP_PLUS,            -3, 2, eval_add, NULL, "+", NULL)
OP( OP_MINUS,           -3, 2, eval_sub, NULL, "-", NULL)
OP( OP_STAR,            -3, 2, eval_mul, NULL, "*", NULL)
OP( OP_SLASH,           -3, 2, eval_div, NULL, "/", NULL)
OP( OP_CARET,           -3, 2, eval_fn2, pow, "^", NULL)
OP( OP_BANG,            -3, 2, eval_bang, NULL, "!", NULL)
OP( OP_COLON,           -3, 2, eval_colon, NULL, ":", NULL)
XX( OP_SEMI,            -3, 2, eval_fl2, makecolor, ";", NULL)
OP( OP_EQ,              -3, 2, eval_cmp, NULL, "=", NULL)
OP( OP_LG,              -3, 2, eval_cmp, NULL, "<>", NULL)
XX( OP_NE,              -3, 2, eval_cmp, NULL, "!=", NULL)
OP( OP_LT,              -3, 2, eval_cmp, NULL, "<", NULL)
OP( OP_LE,              -3, 2, eval_cmp, NULL, "<=", NULL)
OP( OP_GE,              -3, 2, eval_cmp, NULL, ">=", NULL)
OP( OP_GT,              -3, 2, eval_cmp, NULL, ">", NULL)
OP( OP_AMPERSAND,       -3, 2, eval_concat, NULL, "&", NULL)
    /* should have : ! ~ */
OP( OP_UMINUS,          -3, 0, eval_neg, NULL, "-", NULL)
OP( OP_UPLUS,           -3, 0, eval_other, NULL, "+", NULL)
OP( OP_PERCENT,         -4, 1, eval_fn1, math_percent, "%", NULL)

XX( OP_COMMA,           -3, 2, NULL, NULL, ",", NULL)

/* 6.5 Matrix functions */
__( OP_MDETERM,         1, 1, NULL, NULL, "MDETERM(matrix)", "Calculates the determinant of a matrix.")
__( OP_MINVERSE,        1, 1, NULL, NULL, "MINVERSE(matrix)", "Returns the inverse of a matrix.")
__( OP_MMULT,           2, 2, NULL, NULL, "MMULT(matrix, matrix)", "Multiplies two matrices")
__( OP_MUNIT,           1, 1, NULL, NULL, "MUNIT(dimension)", "Returns a unit matrix of a specified dimension.")
LO( OP_RANDARRAY,       2, 2, NULL, NULL, "RANDARRAY(rows, columns)", "Generates an array of random numbers between 0 and 1.")
LO( OP_SEQUENCE,        4, 4, NULL, NULL, "SEQUENCE(rows, columns, start, step)", "Returns an array of sequential numbers, such as 1, 2, 3, 4.")
__( OP_TRANSPOSE,       1, 1, NULL, NULL, "TRANSPOSE(matrix)", "Returns the transpose of a matrix.")

/* 6.6 Bit operand functions */
OP( OP_BITAND,          2, 2, eval_fl2, bitand, "BITAND(value1, value2)", "Bitwise boolean AND of two numbers.")
OP( OP_BITLSHIFT,       2, 2, eval_fl2, bitlshift, "BITLSHIFT(value, shift_amount)", "Shifts the bits of the input a certain number of places to the left.")
OP( OP_BITOR,           2, 2, eval_fl2, bitor, "BITOR(value1, value2)", "Bitwise boolean OR of 2 numbers.")
OP( OP_BITRSHIFT,       2, 2, eval_fl2, bitrshift, "BITRSHIFT(value, shift_amount)", "Shifts the bits of the input a certain number of places to the right.")
OP( OP_BITXOR,          2, 2, eval_fl2, bitxor, "BITXOR(value1, value2)", "Bitwise XOR (exclusive OR) of 2 numbers.")

/* 6.7 Byte-position text functions */
OP( OP_FINDB,           2, 3, eval_find, NULL, "FINDB(search_for, text_to_search, [starting_at])", "Returns the position at which a string is first found within text counting each double-character as 2")
OP( OP_LEFTB,           1, 1, eval_left, NULL, "LEFTB(string, num_of_bytes)", "Returns the left portion of a string up to a certain number of bytes.")
OP( OP_LENB,            1, 1, eval_len, NULL, "LENB(string)", "Returns the length of a string in bytes.")
OP( OP_MIDB,            1, 1, eval_mid, NULL, "MIDB(string)", "Returns a section of a string starting at a given character and up to a specified number of bytes.")
OP( OP_REPLACEB,        4, 4, eval_replace, NULL, "REPLACEB(text, position, num_bytes, new_text)", "Replaces part of a text string, based on a number of bytes, with a different text string.")
OP( OP_RIGHTB,          2, 2, eval_right, NULL, "RIGHTB(string, num_of_bytes)", "Returns the right portion of a string up to a certain number of bytes.")
OP( OP_SEARCHB,         2, 3, eval_find, NULL, "SEARCHB(search_for, text_to_search, [starting_at])", "Returns the position at which a string is first found within text counting each double-character as 2")

/* 6.8 Complex Number Functions */
__( OP_COMPLEX,         2, 3, NULL, NULL, "COMPLEX(real_part, imaginary_part, [suffix])", "Creates a complex number given real and imaginary coefficients")
__( OP_IMABS,           1, 1, NULL, NULL, "IMABS(number)", "Returns absolute value of a complex number")
__( OP_IMAGINARY,       1, 1, NULL, NULL, "IMAGINARY(complex_number)", "Returns the imaginary coefficient of a complex number")
__( OP_IMARGUMENT,      1, 1, NULL, NULL, "IMARGUMENT(number)", "The IMARGUMENT function returns the angle (also known as the argument or \theta) of the given complex number in radians.")
__( OP_IMCONJUGATE,     1, 1, NULL, NULL, "IMCONJUGATE(number)", "Returns the complex conjugate of a number")
__( OP_IMCOS,           1, 1, NULL, NULL, "IMCOS(number)", "The IMCOS function returns the cosine of the given complex number.")
__( OP_IMCOSH,          1, 1, NULL, NULL, "IMCOSH(number)", "Returns the hyperbolic cosine of the given complex number. For example, a given complex number 'x+yi' returns 'cosh(x+yi)'.")
__( OP_IMCOT,           1, 1, NULL, NULL, "IMCOT(number)", "Returns the cotangent of the given complex number. For example, a given complex number 'x+yi' returns 'cot(x+yi)'.")
__( OP_IMCOTH,          1, 1, NULL, NULL, "IMCOTH(number)", "Returns the hyperbolic cotangent of the given complex number. For example, a given complex number 'x+yi' returns 'coth(x+yi)'.")
__( OP_IMCSC,           1, 1, NULL, NULL, "IMCSC(number)", "Returns the cosecant of the given complex number.")
__( OP_IMCSCH,          1, 1, NULL, NULL, "IMCSCH(number)", "Returns the hyperbolic cosecant of the given complex number. For example, a given complex number 'x+yi' returns 'csch(x+yi)'.")
__( OP_IMDIV,           2, 2, NULL, NULL, "IMDIV(dividend, divisor)", "Returns one complex number divided by another")
__( OP_IMEXP,           1, 1, NULL, NULL, "IMEXP(exponent)", "Returns Euler's number, e (~2.718) raised to a complex power.")
__( OP_IMLN,            1, 1, NULL, NULL, "IMLN(complex_value)", "Returns the logarithm of a complex number, base e (Euler's number)")
__( OP_IMLOG,           2, 2, NULL, NULL, "IMLOG(value, base)", "Returns the logarithm of a complex number for a specified base.")
__( OP_IMLOG10,         1, 1, NULL, NULL, "IMLOG10(value)", "Returns the logarithm of a complex number with base 10.")
__( OP_IMLOG2,          1, 1, NULL, NULL, "IMLOG2(value)", "Returns the logarithm of a complex number with base 2.")
__( OP_IMPOWER,         2, 2, NULL, NULL, "IMPOWER(complex_base, exponent)", "Returns a complex number raised to a power")
__( OP_IMPRODUCT,       1, -1, NULL, NULL, "IMPRODUCT(factor1, [factor2, ...])", "Returns the result of multiplying a series of complex numbers together")
__( OP_IMREAL,          1, 1, NULL, NULL, "IMREAL(complex_number)", "Returns the real coefficient of a complex number")
__( OP_IMSEC,           1, 1, NULL, NULL, "IMSEC(number)", "Returns the secant of the given complex number. For example, a given complex number 'x+yi' returns 'sec(x+yi)'.")
__( OP_IMSECH,          1, 1, NULL, NULL, "IMSECH(number)", "Returns the hyperbolic secant of the given complex number. For example, a given complex number 'x+yi' returns 'sech(x+yi)'.")
__( OP_IMSIN,           1, 1, NULL, NULL, "IMSIN (number)", "Returns the sine of the given complex number.")
__( OP_IMSINH,          1, 1, NULL, NULL, "IMSINH(number)", "Returns the hyperbolic sine of the given complex number. For example, a given complex number 'x+yi' returns 'sinh(x+yi)'.")
__( OP_IMSQRT,          1, 1, NULL, NULL, "IMSQRT(complex_number)", "Computes the square root of a complex number")
__( OP_IMSUB,           2, 2, NULL, NULL, "IMSUB(first_number, second_number)", "Returns the difference between two complex numbers")
__( OP_IMSUM,           1, -1, NULL, NULL, "IMSUM(value1, [value2, ...])", "Returns the sum of a series of complex numbers")
__( OP_IMTAN,           1, 1, NULL, NULL, "IMTAN(number)", "Returns the tangent of the given complex number.")
__( OP_IMTANH,          1, 1, NULL, NULL, "IMTANH(number)", "Returns the hyperbolic tangent of the given complex number. For example, a given complex number 'x+yi' returns 'tanh(x+yi)'.")

/* 6.9 Database Functions */
__( OP_DAVERAGE,        3, 3, NULL, NULL, "DAVERAGE(database, field, criteria)", "Returns the average of a set of values selected from a database table-like array or range using a SQL-like query")
__( OP_DCOUNT,          3, 3, NULL, NULL, "DCOUNT(database, field, criteria)", "Counts numeric values selected from a database table-like array or range using a SQL-like query")
__( OP_DCOUNTA,         3, 3, NULL, NULL, "DCOUNTA(database, field, criteria)", "Counts values, including text, selected from a database table-like array or range using a SQL-like query")
__( OP_DGET,            3, 3, NULL, NULL, "DGET(database, field, criteria)", "Returns a single value from a database table-like array or range using a SQL-like query")
__( OP_DMAX,            3, 3, NULL, NULL, "DMAX(database, field, criteria)", "Returns the maximum value selected from a database table-like array or range using a SQL-like query")
__( OP_DMIN,            3, 3, NULL, NULL, "DMIN(database, field, criteria)", "Returns the minimum value selected from a database table-like array or range using a SQL-like query")
__( OP_DPRODUCT,        3, 3, NULL, NULL, "DPRODUCT(database, field, criteria)", "Returns the product of values selected from a database table-like array or range using a SQL-like query")
__( OP_DSTDEV,          3, 3, NULL, NULL, "DSTDEV(database, field, criteria)", "Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query")
__( OP_DSTDEVP,         3, 3, NULL, NULL, "DSTDEVP(database, field, criteria)", "Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query")
__( OP_DSUM,            3, 3, NULL, NULL, "DSUM(database, field, criteria)", "Returns the sum of values selected from a database table-like array or range using a SQL-like query")
__( OP_DVAR,            3, 3, NULL, NULL, "DVAR(database, field, criteria)", "Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query")
__( OP_DVARP,           3, 3, NULL, NULL, "DVARP(database, field, criteria)", "Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query")

/* 6.10 Date and Time Functions */
OP( OP_DATE,            3, 3, eval_date, NULL, "DATE(year, month, day)", "Converts a year, month, and day triplet into a date")
__( OP_DATEDIF,         3, 3, NULL, NULL, "DATEDIF(start_date, end_date, unit)", "Calculates the number of days, months, or years between two dates")
__( OP_DATEVALUE,       1, 1, NULL, NULL, "DATEVALUE(date_string)", "Converts a provided date string in a known format to a date value")
OP( OP_DAY,             1, 1, eval_date_part, NULL, "DAY(date)", "Returns the day of the month that a specific date falls on, in numeric format")
OP( OP_DAYS,            2, 2, eval_days, NULL, "DAYS(end_date, start_date)", "Returns the number of days between two dates.")
OP( OP_DAYS360,         2, 3, eval_days, NULL, "DAYS360(start_date, end_date, [method])", "Returns the difference between two days based on the 360 day year used in some financial interest calculations")
__( OP_EDATE,           2, 2, NULL, NULL, "EDATE(start_date, months)", "Returns a date a specified number of months before or after another date")
__( OP_EOMONTH,         2, 2, NULL, NULL, "EOMONTH(start_date, months)", "Returns a date representing the last day of a month which falls a specified number of months before or after another date")
OP( OP_HOUR,            1, 1, eval_time_part, NULL, "HOUR(time)", "Returns the hour component of a specific time, in numeric format")
__( OP_ISOWEEKNUM,      1, 1, NULL, NULL, "ISOWEEKNUM(date)", "Returns the number of the ISO week of the year where the provided date falls")
OP( OP_MINUTE,          1, 1, eval_time_part, NULL, "MINUTE(time)", "Returns the minute component of a specific time, in numeric format")
OP( OP_MONTH,           1, 1, eval_date_part, NULL, "MONTH(date)", "Returns the month of the year a specific date falls in, in numeric format")
__( OP_NETWORKDAYS,     2, 3, NULL, NULL, "NETWORKDAYS(start_date, end_date, [holidays])", "Returns the number of net working days between two provided days")
__( OP_NETWORKDAYS_INTL, 2, 4, NULL, NULL, "NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])", " Returns the number of net working days between two provided days excluding specified weekend days and holidays")
OP( OP_NOW,             0, 0, eval_now, NULL, "NOW()", "Returns the current date and time as a date value")
OP( OP_SECOND,          1, 1, eval_time_part, NULL, "SECOND(time)", "Returns the second component of a specific time, in numeric format")
OP( OP_TIME,            3, 3, eval_fn3, date_time3, "TIME(hour, minute, second)", "Converts a provided hour, minute, and second into a time")
__( OP_TIMEVALUE,       1, 1, NULL, NULL, "TIMEVALUE(time_string)", "Returns the fraction of a 24-hour day the time represents")
OP( OP_TODAY,           0, 0, eval_now, NULL, "TODAY()", "Returns the current date as a date value")
OP( OP_WEEKDAY,         1, 2, eval_date_part, NULL, "WEEKDAY(date, [type])", "Returns a number representing the day of the week of the date provided")
__( OP_WEEKNUM,         1, 2, NULL, NULL, "WEEKNUM(date, [type])", "Returns a number representing the week of the year where the provided date falls")
__( OP_WORKDAY,         2, 3, NULL, NULL, "WORKDAY(start_date, num_days, [holidays])", "Calculates the end date after a specified number of working days")
__( OP_WORKDAY_INTL,    2, 4, NULL, NULL, "WORKDAY.INTL(start_date, num_days, [weekend], [holidays])", "Calculates the date after a specified number of workdays excluding specified weekend days and holidays")
OP( OP_YEAR,            1, 1, eval_date_part, NULL, "YEAR(date)", "Returns the year specified by a given date")
__( OP_YEARFRAC,        2, 3, NULL, NULL, "YEARFRAC(start_date, end_date, [day_count_convention])", "Returns the number of years, including fractional years, between two dates using a specified day count convention")

XX( OP_DATEFMT,         1, 2, eval_datefmt, NULL, "DATEFMT(date, [format])", "Converts a date into a formated string")

/* 6.11 External Access Functions */
__( OP_DDE,             3, 4, NULL, NULL, "DDE(server, topic, item, [mode=0])", "Returns data from a DDE request")
LO( OP_ENCODEURL,       1, 1, NULL, NULL, "ENCODEURL(text)", "Encodes a string of text for the purpose of using in a URL query.")
XX( OP_EXT,             1, -1, eval_ext, NULL, "EXT(command, arg)", "Run an external process, return first line of output")
__( OP_HYPERLINK,       1, 2, NULL, NULL, "HYPERLINK(url, [link_label])", "Creates a hyperlink inside a cell")
LO( OP_IMPORTDATA,      1, 1, NULL, NULL, "IMPORTDATA(url)", "Imports data at a given url in .csv (comma-separated value) or .tsv (tab-separated value) format")
LO( OP_IMPORTFEED,      1, 4, NULL, NULL, "IMPORTFEED(url, [query], [headers], [num_items])", "Imports a RSS or ATOM feed")
LO( OP_IMPORTHTML,      3, 3, NULL, NULL, "IMPORTHTML(url, query, index)", "Imports data from a table or list within an HTML page")
LO( OP_IMPORTRANGE,     2, 2, NULL, NULL, "IMPORTRANGE(spreadsheet_url, range_string)", "Imports a range of cells from a specified spreadsheet")
LO( OP_IMPORTXML,       2, 2, NULL, NULL, "IMPORTXML(url, xpath_query)", "Imports data from any of various structured data types including XML, HTML, CSV, TSV, and RSS and ATOM XML feeds")
LO( OP_ISURL,           1, 1, NULL, NULL, "ISURL(value)", "Checks whether a value is a valid URL")

/* 6.12 Financial Functions */
__( OP_ACCRINT,         6, 7, NULL, NULL, "ACCRINT(issue, first_payment, settlement, rate, redemption, frequency, [day_count_convention])", "Calculates the accrued interest of a security that has periodic payments")
__( OP_ACCRINTM,        3, 5, NULL, NULL, "ACCRINTM(issue, maturity, rate, [redemption], [day_count_convention])", "Calculates the accrued interest of a security that pays interest at maturity")
__( OP_AMORLINC,        6, 7, NULL, NULL, "AMORLINC(cost, purchase_date, first_period_end, salvage, period, rate, [basis])", "Returns the depreciation for an accounting period, or the prorated depreciation if the asset was purchased in the middle of a period.")
__( OP_COUPDAYBS,       3, 4, NULL, NULL, "COUPDAYBS(settlement, maturity, frequency, [day_count_convention])", "Calculates the number of days from the first coupon, or interest payment, until settlement")
__( OP_COUPDAYS,        3, 4, NULL, NULL, "COUPDAYS(settlement, maturity, frequency, [day_count_convention])", "Calculates the number of days in the coupon, or interest payment, period that contains the specified settlement date")
__( OP_COUPDAYSNC,      3, 4, NULL, NULL, "COUPDAYSNC(settlement, maturity, frequency, [day_count_convention])", " Calculates the number of days from the settlement date until the next coupon, or interest payment")
__( OP_COUPNCD,         3, 4, NULL, NULL, "COUPNCD(settlement, maturity, frequency, [day_count_convention])", "Calculates next coupon, or interest payment, date after the settlement date")
__( OP_COUPNUM,         3, 4, NULL, NULL, "COUPNUM(settlement, maturity, frequency, [day_count_convention])", "Calculates the number of coupons, or interest payments, between the settlement date and the maturity date of the investment")
__( OP_COUPPCD,         3, 4, NULL, NULL, "COUPPCD(settlement, maturity, frequency, [day_count_convention])", "Calculates last coupon, or interest payment, date before the settlement date")
__( OP_CUMIPMT,         6, 6, NULL, NULL, "CUMIPMT(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)", "Calculates the cumulative interest over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate")
__( OP_CUMPRINC,        6, 6, NULL, NULL, "CUMPRINC(rate, number_of_periods, present_value, first_period, last_period, end_or_beginning)", "Calculates the cumulative principal paid over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate")
__( OP_DB,              4, 5, NULL, NULL, "DB(cost, salvage, life, period, [month])", "Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method")
__( OP_DDB,             4, 5, NULL, NULL, "DDB(cost, salvage, life, period, [factor])", "Calculates the depreciation of an asset for a specified period using the double-declining balance method")
__( OP_DISC,            4, 5, NULL, NULL, "DISC(settlement, maturity, price, redemption, [day_count_convention])", "Calculates the discount rate of a security based on price")
__( OP_DOLLARDE,        2, 2, NULL, NULL, "DOLLARDE(fractional_price, unit)", "Converts a price quotation given as a decimal fraction into a decimal value")
__( OP_DOLLARFR,        2, 2, NULL, NULL, "DOLLARFR(decimal_price, unit)", "Converts a price quotation given as a decimal value into a decimal fraction")
__( OP_DURATION,        5, 6, NULL, NULL, "DURATION(settlement, maturity, rate, yield, frequency, [day_count_convention])", "Calculates the number of compounding periods required for an investment of a specified present value appreciating at a given rate to reach a target value")
__( OP_EFFECT,          2, 2, NULL, NULL, "EFFECT(nominal_rate, periods_per_year)", "Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year")
OP( OP_FV,              3, 5, eval_fn3, fin_fv, "FV(rate, number_of_periods, payment_amount, [present_value], [end_or_beginning])", "Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate")
__( OP_FVSCHEDULE,      2, 2, NULL, NULL, "FVSCHEDULE(principal, rate_schedule)", "Calculates the future value of some principal based on a specified series of potentially varying interest rates")
__( OP_INTRATE,         4, 5, NULL, NULL, "INTRATE(buy_date, sell_date, buy_price, sell_price, [day_count_convention])", " Calculates the effective interest rate generated when an investment is purchased at one price and sold at another with no interest or dividends generated by the investment itself")
__( OP_IPMT,            4, 6, NULL, NULL, "IPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])", "Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate")
__( OP_IRR,             1, 2, NULL, NULL, "IRR(cashflow_amounts, [rate_guess])", "Calculates the internal rate of return on an investment based on a series of periodic cash flows")
__( OP_ISPMT,           4, 4, NULL, NULL, "ISPMT(rate, period, number_of_periods, present_value)", "The ISPMT function calculates the interest paid during a particular period of an investment.")
__( OP_MDURATION,       5, 6, NULL, NULL, "MDURATION(settlement, maturity, rate, yield, frequency, [day_count_convention])", "Calculates the modified Macaulay duration of a security paying periodic interest, such as a US Treasury Bond, based on expected yield")
__( OP_MIRR,            3, 3, NULL, NULL, "MIRR(cashflow_amounts, financing_rate, reinvestment_return_rate)", "Calculates the modified internal rate of return on an investment based on a series of periodic cash flows and the difference between the interest rate paid on financing versus the return received on reinvested income")
__( OP_NOMINAL,         2, 3, NULL, NULL, "NOMINAL(effective_rate, periods_per_year)", "Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year")
__( OP_NPER,            3, 5, NULL, NULL, "NPER(rate, payment_amount, present_value, [future_value], [end_or_beginning])", " Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate")
__( OP_NPV,             2, -1, NULL, NULL, "NPV(discount, cashflow1, [cashflow2, ...])", "Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate")
__( OP_PDURATION,       3, 3, NULL, NULL, "PDURATION(rate, present_value, future_value)", "Returns the number of periods for an investment to reach a specific value at a given rate.")
OP( OP_PMT,             3, 5, eval_fn3, fin_pmt, "PMT(rate, number_of_periods, present_value, [future_value], [end_or_beginning])", "Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate")
__( OP_PPMT,            4, 6, NULL, NULL, "PPMT(rate, period, number_of_periods, present_value, [future_value], [end_or_beginning])", "Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate")
__( OP_PRICE,           6, 7, NULL, NULL, "PRICE(settlement, maturity, rate, yield, redemption, frequency, [day_count_convention])", "Calculates the price of a security paying periodic interest, such as a US Treasury Bond, based on expected yield")
__( OP_PRICEDISC,       4, 5, NULL, NULL, "PRICEDISC(settlement, maturity, discount, redemption, [day_count_convention])", "Calculates the price of a discount (non-interest-bearing) security, based on expected yield")
__( OP_PRICEMAT,        5, 6, NULL, NULL, "PRICEMAT(settlement, maturity, issue, rate, yield, [day_count_convention])", " Calculates the price of a security paying interest at maturity, based on expected yield")
OP( OP_PV,              3, 5, eval_fn3, fin_pv, "PV(rate, number_of_periods, payment_amount, [future_value], [end_or_beginning])", "Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate")
__( OP_RATE,            3, 6, NULL, NULL, "RATE(number_of_periods, payment_per_period, present_value, [future_value], [end_or_beginning], [rate_guess])", "Calculates the interest rate of an annuity investment based on constant-amount periodic payments and the assumption of a constant interest rate")
__( OP_RECEIVED,        4, 5, NULL, NULL, "RECEIVED(settlement, maturity, investment, discount, [day_count_convention])", " Calculates the amount received at maturity for an investment in fixed-income securities purchased on a given date")
__( OP_RRI,             3, 3, NULL, NULL, "RRI(number_of_periods, present_value, future_value)", "Returns the interest rate needed for an investment to reach a specific value within a given number of periods.")
__( OP_SLN,             3, 3, NULL, NULL, "SLN(cost, salvage, life)", "Calculates the depreciation of an asset for one period using the straight-line method")
__( OP_SYD,             4, 4, NULL, NULL, "SYD(cost, salvage, life, period)", "Calculates the depreciation of an asset for a specified period using the sum of years digits method")
__( OP_TBILLEQ,         3, 3, NULL, NULL, "TBILLEQ(settlement, maturity, discount)", "Calculates the equivalent annualized rate of return of a US Treasury Bill based on discount rate")
__( OP_TBILLPRICE,      3, 3, NULL, NULL, "TBILLPRICE(settlement, maturity, discount)", "Calculates the price of a US Treasury Bill based on discount rate")
__( OP_TBILLYIELD,      3, 3, NULL, NULL, "TBILLYIELD(settlement, maturity, price)", "Calculates the yield of a US Treasury Bill based on price")
__( OP_VDB,             5, 7, NULL, NULL, "VDB(cost, salvage, life, start_period, end_period, [factor], [no_switch])", "Returns the depreciation of an asset for a particular period (or partial period).")
__( OP_XIRR,            2, 3, NULL, NULL, "XIRR(cashflow_amounts, cashflow_dates, [rate_guess])", "Calculates the internal rate of return of an investment based on a specified series of potentially irregularly spaced cash flows")
__( OP_XNPV,            3, 3, NULL, NULL, "XNPV(discount, cashflow_amounts, cashflow_dates)", "Calculates the net present value of an investment based on a specified series of potentially irregularly spaced cash flows and a discount rate")
__( OP_YIELD,           6, 7, NULL, NULL, "YIELD(settlement, maturity, rate, price, redemption, frequency, [day_count_convention])", "Calculates the annual yield of a security paying periodic interest, such as a US Treasury Bond, based on price")
__( OP_YIELDDISC,       4, 5, NULL, NULL, "YIELDDISC(settlement, maturity, price, redemption, [day_count_convention])", " Calculates the annual yield of a discount (non-interest-bearing) security, based on price")
__( OP_YIELDMAT,        4, 5, NULL, NULL, "YIELDMAT(settlement, maturity, issue, rate, price, [day_count_convention])", "Calculates the annual yield of a security paying interest at maturity, based on price")

/* 6.13 Information Functions */
__( OP_AREAS,           1, -1, NULL, NULL, "AREAS(reference list)", "Returns the number of areas in a given list of references.")
__( OP_CELL,            1, 2, NULL, NULL, "CELL(info_type, [reference])", "Returns the requested information about the specified cell")
OP( OP_COLUMN,          0, 1, eval_row_col, NULL, "COLUMN([cell_reference])", "Returns the column number of a specified cell, with `A=1`")
OP( OP_COLUMNS,         1, 1, eval_rows_cols, NULL, "COLUMNS(range)", "Returns the number of columns in a specified array or range")
OP( OP_COUNT,           1, -1, eval_count, NULL, "COUNT(value1, [value2, ...])", "Returns a count of the number of numeric values in a dataset")
OP( OP_COUNTA,          1, -1, eval_count, NULL, "COUNTA(value1, [value2, ...])", "Returns a count of the number of values in a dataset")
OP( OP_COUNTBLANK,      1, -1, eval_countblank, NULL, "COUNTBLANK(range)", "Returns the number of empty cells in a given range")
OP( OP_COUNTIF,         2, 2, eval_countif, NULL, "COUNTIF(range, criterion)", "Returns a conditional count across a range")
OP( OP_COUNTIFS,        2, -1, eval_countif, NULL, "COUNTIFS(criteria_range1, criterion1, [criteria_range2, criterion2, ...])", "Returns the count of a range depending on multiple criteria")
LO( OP_COUNTUNIQUE,     1, -1, NULL, NULL, "COUNTUNIQUE(value1, [value2, ...])", "Counts the number of unique values in a list of specified values and ranges")
OP( OP_ERROR_TYPE,      1, 1, eval_error_type, NULL, "ERROR.TYPE(reference)", "Returns a number corresponding to the error value in a different cell")
OP( OP_FORMULA,         1, 1, eval_formula, NULL, "FORMULA(cell)", "Checks cell formula as text")
XX( OP_FORMULATEXT,     1, 1, eval_formula, NULL, "FORMULATEXT(cell)", "Returns the formula as a string.") // LO
__( OP_INFO,            1, 1, NULL, NULL, "INFO(category)", "Returns system information")
OP( OP_ISBLANK,         1, 1, eval_isblank, NULL, "ISBLANK(value)", "Checks whether the referenced cell is empty")
LO( OP_ISDATE,          1, 1, NULL, NULL, "ISDATE(value)", "Returns whether a value is a date.")
LO( OP_ISEMAIL,         1, 1, NULL, NULL, "ISEMAIL(value)", "Checks whether a value is a valid email address")
OP( OP_ISERR,           1, 1, eval_iserr, NULL, "ISERR(value)", "Checks whether a value is an error other than `#N/A`")
OP( OP_ISERROR,         1, 1, eval_iserr, NULL, "ISERROR(value)", "Checks whether a value is an error")
OP( OP_ISEVEN,          1, 1, eval_iseven_odd, NULL, "ISEVEN(value)", "Checks whether the provided value is even")
OP( OP_ISFORMULA,       1, 1, eval_isformula, NULL, "ISFORMULA(cell)", "Checks whether a formula is in the referenced cell")
OP( OP_ISLOGICAL,       1, 1, eval_islogical, NULL, "ISLOGICAL(value)", "Checks whether a value is `TRUE` or `FALSE`")
OP( OP_ISNA,            1, 1, eval_iserr, NULL, "ISNA(value)", "Checks whether a value is the error `#N/A`")
OP( OP_ISNONTEXT,       1, 1, eval_isnontext, NULL, "ISNONTEXT(value)", "Checks whether a value is non-textual")
OP( OP_ISNUMBER,        1, 1, eval_isnumber, NULL, "ISNUMBER(value)", "Checks whether a value is a number")
OP( OP_ISODD,           1, 1, eval_iseven_odd, NULL, "ISODD(value)", "Checks whether the provided value is odd")
OP( OP_ISREF,           1, 1, eval_isref, NULL, "ISREF(value)", "Checks whether a value is a valid cell reference")
OP( OP_ISTEXT,          1, 1, eval_istext, NULL, "ISTEXT(value)", "Checks whether a value is text")
__( OP_N,               1, 1, NULL, NULL, "N(value)", "Returns the argument provided as a number")
OP( OP_NA,              0, 0, eval_other, NULL, "NA()", "Returns the 'value not available' error, `#N/A`")
__( OP_NUMBERVALUE,     1, 3, NULL, NULL, "NUMBERVALUE(text, [decimalseparator, [groupseparator]])", "Convert text to number, in a locale-independent way.")
OP( OP_ROW,             0, 1, eval_row_col, NULL, "ROW([cell_reference])", "Returns the row number of a specified cell")
OP( OP_ROWS,            1, 1, eval_rows_cols, NULL, "ROWS(range)", "Returns the number of rows in a specified array or range")
__( OP_SHEET,           0, 1, NULL, NULL, "SHEET([Text|Reference])", "Returns the sheet number of the reference or the string representing a sheet name.")
__( OP_SHEETS,          0, 1, NULL, NULL, "SHEETS([Reference])", "Returns the number of sheets in a reference or current document.")
OP( OP_TYPE,            1, 1, eval_type, NULL, "TYPE(value)", "Returns a number associated with the type of data passed into the function")
__( OP_VALUE,           1, 1, NULL, NULL, "VALUE(text)", "Converts a string in any of the date, time or number formats that Google Sheets understands into a number")

XX( OP_COLS,            1, 1, eval_rows_cols, NULL, "@cols", NULL)
XX( OP_COLTOA,          1, 1, eval_coltoa, NULL, "@coltoa", NULL)
XX( OP_FILENAME,        1, 1, eval_filename, NULL, "@filename", NULL)
XX( OP_LASTCOL,         0, 0, eval_other, NULL, "@lastcol", NULL)
XX( OP_LASTROW,         0, 0, eval_other, NULL, "@lastrow", NULL)
XX( OP_MYCOL,           0, 0, eval_other, NULL, "@mycol", NULL)
XX( OP_MYROW,           0, 0, eval_other, NULL, "@myrow", NULL)
XX( OP_NUMITER,         0, 0, eval_other, NULL, "@numiter", NULL)
XX( OP_NVAL,            2, 2, eval_nval, NULL, "@nval", NULL)
XX( OP_STON,            1, 1, eval_ston, NULL, "@ston", NULL)
XX( OP_SVAL,            2, 2, eval_sval, NULL, "@sval", NULL)

/* 6.14 Lookup Functions */
OP( OP_ADDRESS,         2, 5, eval_address, NULL, "ADDRESS(row, column, [absolute_relative_mode], [use_a1_notation], [sheet])", "Returns a cell reference as a string")
OP( OP_CHOOSE,          2, -1, eval_choose, NULL, "CHOOSE(index, choice1, [choice2, ...])", "Returns an element from a list of choices based on index")
__( OP_GETPIVOTDATA,    2, -1, NULL, NULL, "GETPIVOTDATA(value_name, any_pivot_table_cell, [original_column, ...], [pivot_item, ...])", "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings")
OP( OP_HLOOKUP,         3, 4, eval_lookup, NULL, "HLOOKUP(search_key, range, index, [is_sorted])", "Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found")
OP( OP_INDEX,           1, 3, eval_index, NULL, "INDEX(reference, [row], [column])", "Returns the content of a cell, specified by row and column offset")
OP( OP_INDIRECT,        1, 2, eval_indirect, NULL, "INDIRECT(cell_reference_as_string, [is_A1_notation])", "Returns a cell reference specified by a string")
OP( OP_LOOKUP,          2, 3, eval_lookup, NULL, "LOOKUP(search_key, search_range|search_result_array, [result_range])", "Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column")
OP( OP_MATCH,           2, 3, eval_lookup, NULL, "MATCH(search_key, range, [search_type])", "Returns the relative position of an item in a range that matches a specified value")
__( OP_MULTIPLE_OPERATIONS, 3, 5, NULL, NULL, "MULTIPLE.OPERATIONS(formulacell, rowcell, rowreplacement, [columncell, columnreplacement])", "Executes a formula expression while substituting a row reference and a column reference.")
__( OP_OFFSET,          3, 5, NULL, NULL, "OFFSET(cell_reference, offset_rows, offset_columns, [height], [width])", "Returns a range reference shifted a specified number of rows and columns from a starting cell reference")
OP( OP_VLOOKUP,         3, 4, eval_lookup, NULL, "VLOOKUP(search_key, range, index, [is_sorted])", "Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found")

/* 6.15 Logical Functions */
OP( OP_AND,             1, -1, eval_and, NULL, "AND(logical_expression1, [logical_expression2, ...])", "Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false")
OP( OP_FALSE,           0, 0, eval_other, NULL, "FALSE()", "Returns the logical value `FALSE`")
OP( OP_IF,              3, 3, eval_if, NULL, "IF(logical_expression, [value_if_true, [value_if_false]])", "Returns one value if a logical expression is `TRUE` and another if it is `FALSE`")
OP( OP_IFERROR,         1, 2, eval_iferror, NULL, "IFERROR(value, [value_if_error])", "Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent")
OP( OP_IFNA,            2, 2, eval_iferror, NULL, "IFNA(value, value_if_na)", "Evaluates a value. If the value is an #N/A error, returns the specified value.")
LO( OP_IFS,             2, -1, NULL, NULL, "IFS(condition1, value1, [condition2, value2], ...)", "Evaluates multiple conditions and returns a value that corresponds to the first true condition.")
OP( OP_NOT,             1, 1, eval_not, NULL, "NOT(logical_expression)", "Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`")
OP( OP_OR,              1, -1, eval_or, NULL, "OR(logical_expression1, [logical_expression2, ...])", "Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false")
LO( OP_SWITCH,          1, -1, NULL, NULL, "SWITCH(expression, case1, value1, [default or case2, value2], ...)", "Tests an expression against a list of cases and returns the corresponding value of the first matching case, with an optional default value if nothing else is met")
OP( OP_TRUE,            0, 0, eval_other, NULL, "TRUE()", "Returns the logical value `TRUE`")
OP( OP_XOR,             1, -1, eval_xor, NULL, "XOR(logical_expression1, [logical_expression2, ...])", "The XOR function performs an exclusive or of 2 numbers that returns a 1 if the numbers are different, and a 0 otherwise.")

/* 6.16 Mathematical Functions */
OP( OP_ABS,             1, 1, eval_fn1, fabs, "ABS(value)", "Returns the absolute value of a number")
OP( OP_ACOS,            1, 1, eval_fn1, acos, "ACOS(value)", "Returns the inverse cosine of a value, in radians")
OP( OP_ACOSH,           1, 1, eval_fn1, acosh, "ACOSH(value)", "Returns the inverse hyperbolic cosine of a number")
OP( OP_ACOT,            1, 1, eval_fn1, math_acot, "ACOT(value)", "Returns the inverse cotangent of a value, in radians.")
OP( OP_ACOTH,           1, 1, eval_fn1, math_acoth, "ACOTH(value)", "Returns the inverse hyperbolic cotangent of a value, in radians. Must not be between -1 and 1, inclusive.")
OP( OP_ASIN,            1, 1, eval_fn1, asin, "ASIN(value)", "Returns the inverse sine of a value, in radians")
OP( OP_ASINH,           1, 1, eval_fn1, asinh, "ASINH(value)", "Returns the inverse hyperbolic sine of a number")
OP( OP_ATAN,            1, 1, eval_fn1, atan, "ATAN(value)", "Returns the inverse tangent of a value, in radians")
OP( OP_ATAN2,           2, 2, eval_fn2, atan2, "ATAN2(x, y)", "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians")
OP( OP_ATANH,           1, 1, eval_fn1, atanh, "ATANH(value)", "Returns the inverse hyperbolic tangent of a number")
__( OP_BESSELI,         2, 2, NULL, NULL, "BESSELI(x, n)", "Returns the modified Bessel function of integer order In(X).")
__( OP_BESSELJ,         2, 2, NULL, NULL, "BESSELJ(x, n)", "Returns the Bessel function of integer order Jn(X) (cylinder function)")
__( OP_BESSELK,         2, 2, NULL, NULL, "BESSELK(x, n)", "Returns the modified Bessel function of integer order Kn(x).")
__( OP_BESSELY,         2, 2, NULL, NULL, "BESSELY(x, n)", "Returns the Bessel function of integer order Yn(X), also known as the Neumann function.")
OP( OP_COMBIN,          2, 2, eval_combin, NULL, "COMBIN(n, k)", "Returns the number of ways to choose some number of objects from a pool of a given size of objects")
OP( OP_COMBINA,         2, 2, eval_combin, NULL, "COMBINA(n, k)", "Returns the number of ways to choose some number of objects from a pool of a given size of objects, including ways that choose the same object multiple times.")
__( OP_CONVERT,         3, 3, NULL, NULL, "CONVERT(value, start_unit, end_unit)", "Converts a numeric value to a different unit of measure")
OP( OP_COS,             1, 1, eval_fn1, cos, "COS(angle)", "Returns the cosine of an angle provided in radians")
OP( OP_COSH,            1, 1, eval_fn1, cosh, "COSH(value)", "Returns the hyperbolic cosine of any real number")
OP( OP_COT,             1, 1, eval_fn1, math_cot, "COT(angle)", "Cotangent of an angle provided in radians.")
OP( OP_COTH,            1, 1, eval_fn1, math_coth, "COTH(value)", "Returns the hyperbolic cotangent of any real number.")
OP( OP_CSC,             1, 1, eval_fn1, math_csc, "CSC(angle)", "Returns the cosecant of an angle provided in radians.")
OP( OP_CSCH,            1, 1, eval_fn1, math_csch, "CSCH(value)", "The CSCH function returns the hyperbolic cosecant of any real number.")
OP( OP_DEGREES,         1, 1, eval_fn1, math_degrees, "DEGREES(angle)", "Converts an angle value in radians to degrees")
__( OP_DELTA,           1, 2, NULL, NULL, "DELTA(number1, [number2])", "Compare two numeric values, returning 1 if they're equal")
__( OP_ERF,             1, 2, NULL, NULL, "ERF(lower_bound, [upper_bound])", "The ERF function returns the integral of the Gauss error function over an interval of values.")
__( OP_ERFC,            1, 1, NULL, NULL, "ERFC(z)", "Returns the complementary Gauss error function of a value")
LO( OP_ERFC_PRECISE,    1, 1, NULL, NULL, "ERFC.PRECISE(z)", "See ERFC")
__( OP_EUROCONVERT,     3, 5, NULL, NULL, "EUROCONVERT(n, from, to, [fullprecision=FALSE, [triangulationprecision]])", "Converts a Number, representing a value in one European currency, to an equivalent value in another European currency, according to the fixed conversion rates defined by the Council of the European Union.")
OP( OP_EVEN,            1, 1, eval_fn1, math_even, "EVEN(value)", "Rounds a number up to the nearest even integer")
OP( OP_EXP,             1, 1, eval_fn1, exp, "EXP(exponent)", "Returns Euler's number, e (~2.718) raised to a power")
OP( OP_FACT,            1, 1, eval_fact, NULL, "FACT(value)", "Returns the factorial of a number")
OP( OP_FACTDOUBLE,      1, 1, eval_fact, NULL, "FACTDOUBLE(value)", "Returns the 'double factorial' of a number")
__( OP_GAMMA,           1, 1, NULL, NULL, "GAMMA(number)", "Returns the Gamma function evaluated at the specified value.")
__( OP_GAMMALN,         1, 1, NULL, NULL, "GAMMALN(value)", "Returns the the logarithm of a specified Gamma function, base e (Euler's number)")
LO( OP_GAMMALN_PRECISE, 1, 1, NULL, NULL, "GAMMALN.PRECISE(value)", "See GAMMALN")
OP( OP_GCD,             1, -1, eval_gcd_lcm, NULL, "GCD(value1, [value2...])", "Returns the greatest common divisor of one or more integers")
__( OP_GESTEP,          1, 2, NULL, NULL, "GESTEP(value, [step])", "Returns 1 if the rate is strictly greater than or equal to the provided step value or 0 otherwise. If no step value is provided then the default value of 0 will be used.")
__( OP_ISO_CEILING,     1, 2, NULL, NULL, "ISO.CEILING(number, [significance])", "See CEILING.PRECISE")
OP( OP_LCM,             1, -1, eval_gcd_lcm, NULL, "LCM(value1, [value2 ...])", "Returns the least common multiple of one or more integers")
OP( OP_LN,              1, 1, eval_fn1, log, "LN(value)", "Returns the the logarithm of a number, base e (Euler's number)")
OP( OP_LOG,             1, 2, eval_fn1, log10, "LOG(value, [base])", "Returns the the logarithm of a number given a base")
OP( OP_LOG10,           1, 1, eval_fn1, log10, "LOG10(value)", "Returns the the logarithm of a number, base 10")
OP( OP_MOD,             2, 2, eval_mod, NULL, "MOD(dividend, divisor)", "Returns the result of the modulo operator, the remainder after a division operation")
__( OP_MULTINOMIAL,     1, -1, NULL, NULL, "MULTINOMIAL(value1, [value2...])", "Returns the factorial of the sum of values divided by the product of the values' factorials")
OP( OP_ODD,             1, 1, eval_fn1, math_odd, "ODD(value)", "Rounds a number up to the nearest odd integer")
OP( OP_PI,              0, 0, eval_pi, NULL, "PI()", "Returns the value of Pi to 14 decimal places")
OP( OP_POWER,           2, 2, eval_fn2, pow, "POWER(base, exponent)", "Returns a number raised to a power")
OP( OP_PRODUCT,         1, -1, eval_product, NULL, "PRODUCT(factor1, [factor2, ...])", "Returns the result of multiplying a series of numbers together")
OP( OP_QUOTIENT,        2, 2, eval_quotient, NULL, "QUOTIENT(dividend, divisor)", "Returns one number divided by another")
OP( OP_RADIANS,         1, 1, eval_fn1, math_radians, "RADIANS(angle)", "Converts an angle value in degrees to radians")
OP( OP_RAND,            0, 0, eval_rand, NULL, "RAND()", "Returns a random number between 0 inclusive and 1 exclusive")
OP( OP_RANDBETWEEN,     2, 2, eval_fn2, rand_between, "RANDBETWEEN(low, high)", "Returns a uniformly random integer between two values, inclusive")
OP( OP_SEC,             1, 1, eval_fn1, math_sec, "SEC(angle)", "The SEC function returns the secant of an angle, measured in radians.")
OP( OP_SECH,            1, 1, eval_fn1, math_sech, "SECH(value)", "The SECH function returns the hyperbolic secant of an angle")
__( OP_SERIESSUM,       4, 4, NULL, NULL, "SERIESSUM(x, n, m, a)", "Given parameters x, n, m, and a, returns the power series sum a1xn + a2x(n+m) + ... + aix(n+(i-1)m), where i is the number of entries in range `a`")
OP( OP_SIGN,            1, 1, eval_fn1, math_sign, "SIGN(value)", "Given an input number, returns `-1` if it is negative, `1` if positive, and `0` if it is zero")
OP( OP_SIN,             1, 1, eval_fn1, sin, "SIN(angle)", "Returns the sine of an angle provided in radians")
OP( OP_SINH,            1, 1, eval_fn1, sinh, "SINH(value)", "Returns the hyperbolic sine of any real number")
OP( OP_SQRT,            1, 1, eval_fn1, sqrt, "SQRT(value)", "Returns the positive square root of a positive number")
OP( OP_SQRTPI,          1, 1, eval_fn1, math_sqrtpi, "SQRTPI(value)", "Returns the positive square root of the product of Pi and the given positive number")
__( OP_SUBTOTAL,        2, -1, NULL, NULL, "SUBTOTAL(function_code, range1, [range2, ...])", "Returns a subtotal for a vertical range of cells using a specified aggregation function")
OP( OP_SUM,             1, -1, eval_sum, NULL, "SUM(value1, [value2, ...])", "Returns the sum of a series of numbers and/or cells")
OP( OP_SUMIF,           2, 3, eval_sumif, NULL, "SUMIF(range, criterion, [sum_range])", "Returns a conditional sum across a range")
OP( OP_SUMIFS,          3, -1, eval_sumif, NULL, "SUMIFS(sum_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])", "Returns the sum of a range depending on multiple criteria")
OP( OP_SUMPRODUCT,      1, -1, eval_sumproduct, NULL, "SUMPRODUCT(arrays)", "Returns the sum of the products of the matrix elements.")
OP( OP_SUMSQ,           1, -1, eval_sumsq, NULL, "SUMSQ(value1, [value2, ...])", "Returns the sum of the squares of a series of numbers and/or cells")
OP( OP_SUMX2MY2,        2, 2, eval_sumxy, NULL, "SUMX2MY2(array A, array B)", "Returns the sum of the difference between the squares of the matrices A and B.")
OP( OP_SUMX2PY2,        2, 2, eval_sumxy, NULL, "SUMX2PY2(array A, array B)", "Returns the total sum of the squares of the matrices A and B")
OP( OP_SUMXMY2,         2, 2, eval_sumxy, NULL, "SUMXMY2(array A, array B)", "Returns the sum of the squares of the differences between matrix A and B.")
OP( OP_TAN,             1, 1, eval_fn1, tan, "TAN(angle)", "Returns the tangent of an angle provided in radians")
OP( OP_TANH,            1, 1, eval_fn1, tanh, "TANH(value)", "Returns the hyperbolic tangent of any real number")

XX( OP_HYPOT,           2, 2, eval_fn2, hypot, "HYPOT(x, y)", "Compute the length of the hypotenuse: SQRT(X*X+Y*Y)")

/* 6.17 Rounding Functions */
OP( OP_CEILING,         1, 3, eval_mround, NULL, "CEILING(value, [factor], [mode])", "Rounds a number up to the nearest integer multiple of specified significance")
LO( OP_CEILING_MATH,    1, 3, NULL, NULL, "CEILING.MATH(number, [significance], [mode])", "Rounds a number up to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.")
LO( OP_CEILING_PRECISE, 1, 2, NULL, NULL, "CEILING.PRECISE(number, [significance])", "Rounds a number up to the nearest integer multiple of specified significance. If the number is positive or negative, it is rounded up.")
OP( OP_INT,             1, 1, eval_fn1, floor, "INT(value)", "Rounds a number down to the nearest integer that is less than or equal to it")
OP( OP_FLOOR,           1, 2, eval_mround, NULL, "FLOOR(value, [factor])", "Rounds a number down to the nearest integer multiple of specified significance")
LO( OP_FLOOR_MATH,      1, 3, NULL, NULL, "FLOOR.MATH(number, [significance], [mode])", "Rounds a number down to the nearest integer multiple of specified significance, with negative numbers rounding toward or away from 0 depending on the mode.")
LO( OP_FLOOR_PRECISE,   1, 2, NULL, NULL, "FLOOR.PRECISE(number, [significance])", "The FLOOR.PRECISE function rounds a number down to the nearest integer or multiple of specified significance.")
OP( OP_MROUND,          2, 2, eval_mround, NULL, "MROUND(value, factor)", "Rounds one number to the nearest integer multiple of another")
OP( OP_ROUND,           1, 2, eval_round, NULL, "ROUND(value, [places])", "Rounds a number to a certain number of decimal places according to standard rules")
OP( OP_ROUNDDOWN,       1, 2, eval_round, NULL, "ROUNDDOWN(value, [places])", "Rounds a number to a certain number of decimal places, always rounding down to the next valid increment")
OP( OP_ROUNDUP,         1, 2, eval_round, NULL, "ROUNDUP(value, [places])", "Rounds a number to a certain number of decimal places, always rounding up to the next valid increment")
OP( OP_TRUNC,           1, 2, eval_round, NULL, "TRUNC(value, [places])", "Truncates a number to a certain number of significant digits by omitting less significant digits")

XX( OP_RND,             1, 1, eval_fn1, dornd, "RND(value)", NULL)

/* 6.18 Statistical Functions */
__( OP_AVEDEV,          1, -1, NULL, NULL, "AVEDEV(value1, [value2, ...])", "Calculates the average of the magnitudes of deviations of data from a dataset's mean")
OP( OP_AVERAGE,         1, -1, eval_average, NULL, "AVERAGE(value1, [value2, ...])", "Returns the numerical average value in a dataset, ignoring text")
__( OP_AVERAGE_WEIGHTED, 1, 1, NULL, NULL, "AVERAGE.WEIGHTED(values, weights, [additional values], [additional weights])", "Finds the weighted average of a set of values, given the values and the corresponding weights.")
OP( OP_AVERAGEA,        1, -1, eval_average, NULL, "AVERAGEA(value1, [value2, ...])", "Returns the numerical average value in a dataset")
OP( OP_AVERAGEIF,       2, 3, eval_averageif, NULL, "AVERAGEIF(criteria_range, criterion, [average_range])", "Returns the average of a range depending on criteria")
OP( OP_AVERAGEIFS,      3, -1, eval_averageif, NULL, "AVERAGEIFS(average_range, criteria_range1, criterion1, [criteria_range2, criterion2, ...])", "Returns the average of a range depending on multiple criteria")
__( OP_BETA_DIST,       1, 1, NULL, NULL, "BETA.DIST(value, alpha, beta, cumulative, lower_bound, upper_bound)", "Returns the probability of a given value as defined by the beta distribution function.")
__( OP_BETA_INV,        1, 1, NULL, NULL, "BETA.INV(probability, alpha, beta, lower_bound, upper_bound)", "Returns the value of the inverse beta distribution function for a given probability.")
__( OP_BETADIST,        1, 1, NULL, NULL, "BETADIST(value, alpha, beta, lower_bound, upper_bound)", "See BETA.DIST.")
__( OP_BETAINV,         1, 1, NULL, NULL, "BETAINV(probability, alpha, beta, lower_bound, upper_bound)", " See BETA.INV")
__( OP_BINOM_DIST,      1, 1, NULL, NULL, "BINOM.DIST(num_successes, num_trials, prob_success, cumulative)", "See BINOMDIST")
__( OP_BINOM_INV,       1, 1, NULL, NULL, "BINOM.INV(num_trials, prob_success, target_prob)", "See CRITBINOM")
__( OP_BINOMDIST,       1, 1, NULL, NULL, "BINOMDIST(num_successes, num_trials, prob_success, cumulative)", "Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws")
__( OP_CHIDIST,         1, 1, NULL, NULL, "CHIDIST(x, degrees_freedom)", "Calculates the right-tailed chi-squared distribution, often used in hypothesis testing")
__( OP_CHIINV,          1, 1, NULL, NULL, "CHIINV(probability, degrees_freedom)", "Calculates the inverse of the right-tailed chi-squared distribution")
__( OP_CHISQ_DIST,      1, 1, NULL, NULL, "CHISQ.DIST(x, degrees_freedom, cumulative)", "Calculates the left-tailed chi-squared distribution, often used in hypothesis testing")
__( OP_CHISQ_DIST_RT,   1, 1, NULL, NULL, "CHISQ.DIST.RT(x, degrees_freedom)", "Calculates the right-tailed chi-squared distribution, which is commonly used in hypothesis testing")
__( OP_CHISQ_INV,       1, 1, NULL, NULL, "CHISQ.INV(probability, degrees_freedom)", "Calculates the inverse of the left-tailed chi-squared distribution")
__( OP_CHISQ_INV_RT,    1, 1, NULL, NULL, "CHISQ.INV.RT(probability, degrees_freedom)", "Calculates the inverse of the right-tailed chi-squared distribution")
__( OP_CHISQ_TEST,      1, 1, NULL, NULL, "CHISQ.TEST(observed_range, expected_range)", "See CHITEST")
__( OP_CHITEST,         1, 1, NULL, NULL, "CHITEST(observed_range, expected_range)", "Returns the probability associated with a Pearsons chi-squared test on the two ranges of data. Determines the likelihood that the observed categorical data is drawn from an expected distribution")
__( OP_CONFIDENCE,      1, 1, NULL, NULL, "CONFIDENCE(alpha, standard_deviation, pop_size)", "See CONFIDENCE.NORM")
__( OP_CONFIDENCE_NORM, 1, 1, NULL, NULL, "CONFIDENCE.NORM(alpha, standard_deviation, pop_size)", "Calculates the width of half the confidence interval for a normal distribution.")
__( OP_CONFIDENCE_T,    1, 1, NULL, NULL, "CONFIDENCE.T(alpha, standard_deviation, size)", "Calculates the width of half the confidence interval for a Students t-distribution.")
__( OP_CORREL,          1, 1, NULL, NULL, "CORREL(data_y, data_x)", "Calculates r, the Pearson product-moment correlation coefficient of a dataset")
__( OP_COVAR,           1, 1, NULL, NULL, "COVAR(data_y, data_x)", "Calculates the covariance of a dataset")
__( OP_COVARIANCE_P,    1, 1, NULL, NULL, "COVARIANCE.P(data_y, data_x)", "See COVAR")
__( OP_COVARIANCE_S,    1, 1, NULL, NULL, "COVARIANCE.S(data_y, data_x)", "Calculates the covariance of a dataset, where the dataset is a sample of the total population.")
__( OP_CRITBINOM,       1, 1, NULL, NULL, "CRITBINOM(num_trials, prob_success, target_prob)", "Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria")
__( OP_DEVSQ,           1, 1, NULL, NULL, "DEVSQ(value1, value2)", "Calculates the sum of squares of deviations based on a sample")
__( OP_EXPON_DIST,      1, 1, NULL, NULL, "EXPON.DIST(x, lambda, cumulative)", "Returns the value of the exponential distribution function with a specified lambda at a specified value.")
__( OP_EXPONDIST,       1, 1, NULL, NULL, "EXPONDIST(x, lambda, cumulative)", "See EXPON.DIST")
__( OP_F_DIST,          1, 1, NULL, NULL, "F.DIST(x, degrees_freedom1, degrees_freedom2, cumulative)", "Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution")
__( OP_F_DIST_RT,       1, 1, NULL, NULL, "F.DIST.RT(x, degrees_freedom1, degrees_freedom2)", "Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution")
__( OP_F_INV,           1, 1, NULL, NULL, "F.INV(probability, degrees_freedom1, degrees_freedom2)", "Calculates the inverse of the left-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecors F distribution")
__( OP_F_INV_RT,        1, 1, NULL, NULL, "F.INV.RT(probability, degrees_freedom1, degrees_freedom2)", "Calculates the inverse of the right-tailed F probability distribution. Also called the Fisher-Snedecor distribution or Snedecors F distribution")
__( OP_F_TEST,          1, 1, NULL, NULL, "F.TEST(range1, range2)", "See FTEST.")
__( OP_FDIST,           1, 1, NULL, NULL, "FDIST(x, degrees_freedom1, degrees_freedom2)", "See F.DIST.RT.")
__( OP_FINV,            1, 1, NULL, NULL, "FINV(probability, degrees_freedom1, degrees_freedom2)", "See F.INV.RT")
__( OP_FISHER,          1, 1, NULL, NULL, "FISHER(value)", "Returns the Fisher transformation of a specified value")
__( OP_FISHERINV,       1, 1, NULL, NULL, "FISHERINV(value)", "Returns the inverse Fisher transformation of a specified value")
__( OP_FORECAST,        1, 1, NULL, NULL, "FORECAST(x, data_y, data_x)", "Calculates the expected y-value for a specified x based on a linear regression of a dataset")
__( OP_FORECAST_LINEAR, 1, 1, NULL, NULL, "FORECAST.LINEAR(x, data_y, data_x)", "See FORECAST")
__( OP_FTEST,           1, 1, NULL, NULL, "FTEST(range1, range2)", "Returns the probability associated with an F-test for equality of variances. Determines whether two samples are likely to have come from populations with the same variance")
__( OP_GAMMA_DIST,      1, 1, NULL, NULL, "GAMMA.DIST(x, alpha, beta, cumulative)", "Calculates the gamma distribution, a two-parameter continuous probability distribution")
__( OP_GAMMA_INV,       1, 1, NULL, NULL, "GAMMA.INV(probability, alpha, beta)", "The GAMMA.INV function returns the value of the inverse gamma cumulative distribution function for the specified probability and alpha and beta parameters.")
__( OP_GAMMADIST,       1, 1, NULL, NULL, "GAMMADIST(x, alpha, beta, cumulative)", "See GAMMA.DIST")
__( OP_GAMMAINV,        1, 1, NULL, NULL, "GAMMAINV(probability, alpha, beta)", "See GAMMA.INV.")
__( OP_GAUSS,           1, 1, NULL, NULL, "GAUSS(z)", "The GAUSS function returns the probability that a random variable, drawn from a normal distribution, will be between the mean and z standard deviations above (or below) the mean.")
__( OP_GEOMEAN,         1, 1, NULL, NULL, "GEOMEAN(value1, value2)", "Calculates the geometric mean of a dataset")
__( OP_HARMEAN,         1, 1, NULL, NULL, "HARMEAN(value1, value2)", "Calculates the harmonic mean of a dataset")
__( OP_HYPGEOM_DIST,    1, 1, NULL, NULL, "HYPGEOM.DIST(num_successes, num_draws, successes_in_pop, pop_size)", "See HYPGEOMDIST")
__( OP_HYPGEOMDIST,     1, 1, NULL, NULL, "HYPGEOMDIST(num_successes, num_draws, successes_in_pop, pop_size)", " Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws")
__( OP_INTERCEPT,       1, 1, NULL, NULL, "INTERCEPT(data_y, data_x)", "Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0)")
__( OP_KURT,            1, 1, NULL, NULL, "KURT(value1, value2)", "Calculates the kurtosis of a dataset, which describes the shape, and in particular the 'peakedness' of that dataset")
__( OP_LARGE,           2, 2, NULL, NULL, "LARGE(data, n)", "Returns the nth largest element from a data set, where n is user-defined")
__( OP_LOGINV,          1, 1, NULL, NULL, "LOGINV(x, mean, standard_deviation)", "Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value")
__( OP_LOGNORM_DIST,    1, 1, NULL, NULL, "LOGNORM.DIST(x, mean, standard_deviation)", "See LOGNORMDIST")
__( OP_LOGNORM_INV,     1, 1, NULL, NULL, "LOGNORM.INV(x, mean, standard_deviation)", "See LOGINV")
__( OP_LOGNORMDIST,     1, 1, NULL, NULL, "LOGNORMDIST(x, mean, standard_deviation)", "Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value")
OP( OP_MAX,             1, -1, eval_max, NULL, "MAX(value1, [value2, ...])", "Returns the maximum value in a numeric dataset")
OP( OP_MAXA,            1, -1, eval_max, NULL, "MAXA(value1, [value2, ...])", "Returns the maximum numeric value in a dataset")
XX( OP_MAXIF,           2, 2, eval_maxif, NULL, "MAXIF(range, criteria_range1)", "Returns the maximum value in a numeric dataset")
OP( OP_MAXIFS,          1, 1, eval_maxif, NULL, "MAXIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], ...)", "Returns the maximum value in a range of cells, filtered by a set of criteria.")
__( OP_MEDIAN,          1, -1, NULL, NULL, "MEDIAN(value1, [value2, ...])", "Returns the median value in a numeric dataset")
OP( OP_MIN,             1, -1, eval_min, NULL, "MIN(value1, [value2, ...])", "Returns the minimum value in a numeric dataset")
OP( OP_MINA,            1, -1, eval_min, NULL, "MINA(value1, [value2, ...])", "Returns the minimum numeric value in a dataset")
XX( OP_MINIF,           2, 2, eval_minif, NULL, "MINIF(range, criteria_range1)", "Returns the maximum value in a numeric dataset")
OP( OP_MINIFS,          1, 1, eval_minif, NULL, "MINIFS(range, criteria_range1, criterion1, [criteria_range2, criterion2], ...)", "Returns the minimum value in a range of cells, filtered by a set of criteria.")
__( OP_MODE,            1, -1, NULL, NULL, "MODE(value1, [value2, ...])", "Returns the most commonly occurring value in a dataset")
__( OP_MODE_MULT,       1, 1, NULL, NULL, "MODE.MULT(value1, value2)", "Returns the most commonly occurring values in a dataset.")
__( OP_MODE_SNGL,       1, 1, NULL, NULL, "MODE.SNGL(value1, [value2, ...])", "See MODE")
__( OP_NEGBINOM_DIST,   1, 1, NULL, NULL, "NEGBINOM.DIST(num_failures, num_successes, prob_success)", "See NEGBINOMDIST")
__( OP_NEGBINOMDIST,    1, 1, NULL, NULL, "NEGBINOMDIST(num_failures, num_successes, prob_success)", "Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials")
__( OP_NORM_DIST,       1, 1, NULL, NULL, "NORM.DIST(x, mean, standard_deviation, cumulative)", "See NORMDIST")
__( OP_NORM_INV,        1, 1, NULL, NULL, "NORM.INV(x, mean, standard_deviation)", "See NORMINV")
__( OP_NORM_S_DIST,     1, 1, NULL, NULL, "NORM.S.DIST(x)", "See NORMSDIST")
__( OP_NORM_S_INV,      1, 1, NULL, NULL, "NORM.S.INV(x)", "See NORMSINV")
__( OP_NORMDIST,        1, 1, NULL, NULL, "NORMDIST(x, mean, standard_deviation, cumulative)", "Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation")
__( OP_NORMINV,         1, 1, NULL, NULL, "NORMINV(x, mean, standard_deviation)", "Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation")
__( OP_NORMSDIST,       1, 1, NULL, NULL, "NORMSDIST(x)", "Returns the value of the standard normal cumulative distribution function for a specified value")
__( OP_NORMSINV,        1, 1, NULL, NULL, "NORMSINV(x)", "Returns the value of the inverse standard normal distribution function for a specified value")
__( OP_PEARSON,         1, 1, NULL, NULL, "PEARSON(data_y, data_x)", "Calculates r, the Pearson product-moment correlation coefficient of a dataset")
__( OP_PERCENTILE,      1, 1, NULL, NULL, "PERCENTILE(data, percentile)", "Returns the value at a given percentile of a dataset")
__( OP_PERCENTILE_EXC,  1, 1, NULL, NULL, "PERCENTILE.EXC(data, percentile)", "Returns the value at a given percentile of a dataset, exclusive of 0 and 1.")
__( OP_PERCENTILE_INC,  1, 1, NULL, NULL, "PERCENTILE.INC(data, percentile)", "See PERCENTILE")
__( OP_PERCENTRANK,     1, 1, NULL, NULL, "PERCENTRANK(data, value, [significant_digits])", "Returns the percentage rank (percentile) of a specified value in a dataset")
__( OP_PERCENTRANK_EXC, 1, 1, NULL, NULL, "PERCENTRANK.EXC(data, value, [significant_digits])", "Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset")
__( OP_PERCENTRANK_INC, 1, 1, NULL, NULL, "PERCENTRANK.INC(data, value, [significant_digits])", "Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset")
OP( OP_PERMUT,          2, 2, eval_permut, NULL, "PERMUT(n, k)", "Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order")
OP( OP_PERMUTATIONA,    2, 2, eval_permut, NULL, "PERMUTATIONA(number, number_chosen)", "Returns the number of permutations for selecting a group of objects (with replacement) from a total number of objects.")
__( OP_PHI,             1, 1, NULL, NULL, "PHI(x)", "The PHI function returns the value of the normal distribution with mean 0 and standard deviation 1.")
__( OP_POISSON,         1, 1, NULL, NULL, "POISSON(x, mean, cumulative)", "See POISSON.DIST")
__( OP_POISSON_DIST,    1, 1, NULL, NULL, "POISSON.DIST(x, mean, [cumulative])", "Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean.")
__( OP_PROB,            1, 1, NULL, NULL, "PROB(data, probabilities, low_limit, [high_limit])", "Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits")
__( OP_QUARTILE,        1, 1, NULL, NULL, "QUARTILE(data, quartile_number)", "Returns a value nearest to a specified quartile of a dataset")
__( OP_QUARTILE_EXC,    1, 1, NULL, NULL, "QUARTILE.EXC(data, quartile_number)", "Returns value nearest to a given quartile of a dataset, exclusive of 0 and 4.")
__( OP_QUARTILE_INC,    1, 1, NULL, NULL, "QUARTILE.INC(data, quartile_number)", "See QUARTILE")
__( OP_RANK,            2, 3, NULL, NULL, "RANK(value, data, [is_ascending])", "Returns the rank of a specified value in a dataset")
__( OP_RANK_AVG,        1, 1, NULL, NULL, "RANK.AVG(value, data, [is_ascending])", "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned")
__( OP_RANK_EQ,         1, 1, NULL, NULL, "RANK.EQ(value, data, [is_ascending])", "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned")
__( OP_RSQ,             1, 1, NULL, NULL, "RSQ(data_y, data_x)", "Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset")
__( OP_SKEW,            1, 1, NULL, NULL, "SKEW(value1, value2)", "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean")
__( OP_SKEW_P,          1, 1, NULL, NULL, "SKEW.P(value1, value2)", "Calculates the skewness of a dataset that represents the entire population.")
__( OP_SLOPE,           1, 1, NULL, NULL, "SLOPE(data_y, data_x)", "Calculates the slope of the line resulting from linear regression of a dataset")
__( OP_SMALL,           2, 2, NULL, NULL, "SMALL(data, n)", "Returns the nth smallest element from a data set, where n is user-defined")
__( OP_STANDARDIZE,     1, 1, NULL, NULL, "STANDARDIZE(value, mean, standard_deviation)", "Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution")
OP( OP_STDEV,           1, -1, eval_stdev, NULL, "STDEV(value1, [value2, ...])", "Calculates the standard deviation based on a sample")
__( OP_STDEV_P,         1, -1, NULL, NULL, "STDEV.P(value1, [value2, ...])", "See STDEVP")
__( OP_STDEV_S,         1, -1, NULL, NULL, "STDEV.S(value1, [value2, ...])", "See STDEV")
OP( OP_STDEVA,          1, -1, eval_stdev, NULL, "STDEVA(value1, [value2, ...])", "Calculates the standard deviation based on a sample, setting text to the value `0`")
OP( OP_STDEVP,          1, -1, eval_stdevp, NULL, "STDEVP(value1, [value2, ...])", "Calculates the standard deviation based on an entire population")
OP( OP_STDEVPA,         1, -1, eval_stdevp, NULL, "STDEVPA(value1, [value2, ...])", "Calculates the standard deviation based on an entire population, setting text to the value `0`")
__( OP_STEYX,           2, 2, NULL, NULL, "STEYX(data_y, data_x)", "Calculates the standard error of the predicted y-value for each x in the regression of a dataset")
__( OP_T_DIST,          3, 3, NULL, NULL, "T.DIST(x, degrees_freedom, cumulative)", "Returns the right tailed Student distribution for a value x.")
__( OP_T_DIST_2T,       2, 2, NULL, NULL, "T.DIST.2T(x, degrees_freedom)", "Returns the two tailed Student distribution for a value x.")
__( OP_T_DIST_RT,       2, 2, NULL, NULL, "T.DIST.RT(x, degrees_freedom)", "Returns the right tailed Student distribution for a value x.")
__( OP_T_INV,           2, 2, NULL, NULL, "T.INV(probability, degrees_freedom)", "Calculates the negative inverse of the one-tailed TDIST function")
__( OP_T_INV_2T,        2, 2, NULL, NULL, "T.INV.2T(probability, degrees_freedom)", "Calculates the inverse of the two-tailed TDIST function")
__( OP_T_TEST,          4, 4, NULL, NULL, "T.TEST(range1, range2, tails, type)", "Returns the probability associated with Student's t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean.")
__( OP_TDIST,           3, 3, NULL, NULL, "TDIST(x, degrees_freedom, tails)", "Calculates the probability for Student's t-distribution with a given input (x)")
__( OP_TINV,            2, 2, NULL, NULL, "TINV(probability, degrees_freedom)", "See T.INV.2T")
__( OP_TRIMMEAN,        2, 2, NULL, NULL, "TRIMMEAN(data, exclude_proportion)", "Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset")
__( OP_TTEST,           4, 3, NULL, NULL, "TTEST(range1, range2, tails, type)", "See T.TEST.")
OP( OP_VAR,             1, -1, eval_var, NULL, "VAR(value1, [value2, ...])", "Calculates the variance based on a sample")
__( OP_VAR_P,           1, -1, NULL, NULL, "VAR.P(value1, [value2, ...])", "See VARP")
__( OP_VAR_S,           1, -1, NULL, NULL, "VAR.S(value1, [value2, ...])", "See VAR")
OP( OP_VARA,            1, -1, eval_var, NULL, "VARA(value1, [value2, ...])", "Calculates an estimate of variance based on a sample, setting text to the value `0`")
OP( OP_VARP,            1, -1, eval_varp, NULL, "VARP(value1, [value2, ...])", "Calculates the variance based on an entire population")
OP( OP_VARPA,           1, -1, eval_varp, NULL, "VARPA(value1, [value2, ...])", "Calculates the variance based on an entire population, setting text to the value `0`")
__( OP_WEIBULL,         4, 4, NULL, NULL, "WEIBULL(x, shape, scale, cumulative)", "Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale")
__( OP_WEIBULL_DIST,    4, 4, NULL, NULL, "WEIBULL.DIST(x, shape, scale, cumulative)", "See WEIBULL")
__( OP_Z_TEST,          2, 3, NULL, NULL, "Z.TEST(data, value, [standard_deviation])", "Returns the one-tailed P-value of a Z-test with standard distribution.")
__( OP_ZTEST,           2, 3, NULL, NULL, "ZTEST(data, value, [standard_deviation])", "See Z.TEST.")

XX( OP_AVG,             1, -1, eval_average, NULL, "AVG(value1, [value2, ...])", "Equivalent to AVERAGE()")

/* 6.19 Number Representation Conversion Functions */
__( OP_TO_DATE,         1, 1, NULL, NULL, "TO_DATE(value)", "Converts a provided number to a date")
__( OP_TO_DOLLARS,      1, 1, NULL, NULL, "TO_DOLLARS(value)", "Converts a provided number to a dollar value")
__( OP_TO_PERCENT,      1, 1, NULL, NULL, "TO_PERCENT(value)", "Converts a provided number to a percentage")
__( OP_TO_PURE_NUMBER,  1, 1, NULL, NULL, "TO_PURE_NUMBER(value)", "Converts a provided date/time, percentage, currency or other formatted numeric value to a pure number without formatting")
__( OP_TO_TEXT,         1, 1, NULL, NULL, "TO_TEXT(value)", "Converts a provided numeric value to a text value")

OP( OP_ARABIC,          1, 1, eval_arabic, NULL, "ARABIC(roman_numeral)", "Computes the value of a Roman numeral")
OP( OP_BASE,            2, 3, eval_base, NULL, "BASE(value, base, [min_length])", "Converts a number into a text representation in another base, for example, base 2 for binary.")
OP( OP_BIN2DEC,         1, 1, eval_bin2dec, NULL, "BIN2DEC(signed_binary_number)", "Converts a signed binary number to decimal format")
OP( OP_BIN2HEX,         1, 2, eval_bin2hex, NULL, "BIN2HEX(signed_binary_number, [significant_digits])", "Converts a signed binary number to signed hexadecimal format")
OP( OP_BIN2OCT,         1, 2, eval_bin2oct, NULL, "BIN2OCT(signed_binary_number, [significant_digits])", "Converts a signed binary number to signed octal format")
OP( OP_DEC2BIN,         1, 2, eval_dec2bin, NULL, "DEC2BIN(decimal_number, [significant_digits])", "Converts a decimal number to signed binary format")
OP( OP_DEC2HEX,         1, 2, eval_dec2hex, NULL, "DEC2HEX(decimal_number, [significant_digits])", "Converts a decimal number to signed hexadecimal format")
OP( OP_DEC2OCT,         1, 2, eval_dec2oct, NULL, "DEC2OCT(decimal_number, [significant_digits])", "Converts a decimal number to signed octal format")
OP( OP_DECIMAL,         2, 2, eval_decimal, NULL, "DECIMAL(value, base)", "The DECIMAL function converts the text representation of a number in another base, to base 10 (decimal).")
OP( OP_HEX2BIN,         1, 2, eval_hex2bin, NULL, "HEX2BIN(signed_hexadecimal_number, [significant_digits])", "Converts a signed hexadecimal number to signed binary format")
OP( OP_HEX2DEC,         1, 1, eval_hex2dec, NULL, "HEX2DEC(signed_hexadecimal_number)", "Converts a signed hexadecimal number to decimal format")
OP( OP_HEX2OCT,         1, 2, eval_hex2oct, NULL, "HEX2OCT(signed_hexadecimal_number, significant_digits)", "Converts a signed hexadecimal number to signed octal format")
OP( OP_OCT2BIN,         1, 1, eval_oct2bin, NULL, "OCT2BIN(signed_octal_number, [significant_digits])", "Converts a signed octal number to signed binary format")
OP( OP_OCT2DEC,         1, 1, eval_oct2dec, NULL, "OCT2DEC(signed_octal_number)", "Converts a signed octal number to decimal format")
OP( OP_OCT2HEX,         1, 2, eval_oct2hex, NULL, "OCT2HEX(signed_octal_number, [significant_digits])", "Converts a signed octal number to signed hexadecimal format")
OP( OP_ROMAN,           1, 2, eval_roman, NULL, "ROMAN(number, [rule_relaxation])", "Formats a number in Roman numerals")

XX( OP_FMT,             2, 2, eval_fmt, NULL, "FMT(format_string, value)", NULL)

/* 6.20 Text Functions */
__( OP_ASC,             1, 1, NULL, NULL, "ASC(text)", "Converts full-width ASCII and katakana characters to their half-width counterparts. All standard-width characters will remain unchanged.")
OP( OP_CHAR,            1, 1, eval_char, NULL, "CHAR(table_number)", "Convert a number into a character according to the current Unicode table")
OP( OP_CLEAN,           1, 1, eval_fs1, string_clean, "CLEAN(text)", "Returns the text with the non-printable ASCII characters removed")
OP( OP_CODE,            1, 1, eval_code, NULL, "CODE(string)", "Returns the numeric Unicode map value of the first character in the string provided")
OP( OP_CONCATENATE,     1, -1, eval_concat, NULL, "CONCATENATE(string1, [string2, ...])", "Appends strings to one another")
__( OP_DOLLAR,          1, 2, NULL, NULL, "DOLLAR(number, [number_of_places])", "Formats a number into the locale-specific currency format")
OP( OP_EXACT,           2, 2, eval_exact, NULL, "EXACT(string1, string2)", "Tests whether two strings are identical")
OP( OP_FIND,            2, 3, eval_find, NULL, "FIND(search_for, text_to_search, [starting_at])", "Returns the position at which a string is first found within text")
__( OP_FIXED,           1, 3, NULL, NULL, "FIXED(number, [number_of_places], [suppress_separator])", "Formats a number with a fixed number of decimal places")
__( OP_JIS,             1, 1, NULL, NULL, "JIS(text)", "Converts half-width to full-width ASCII and katakana characters.")
LO( OP_JOIN,            2, -1, NULL, NULL, "JOIN(delimiter, value_or_array1, [value_or_array2, ...])", "Concatenates the elements of one or more one-dimensional arrays using a specified delimiter")
OP( OP_LEFT,            1, 2, eval_left, NULL, "LEFT(string, [number_of_characters])", "Returns a substring from the beginning of a specified string")
OP( OP_LEN,             1, 1, eval_len, NULL, "LEN(text)", "Returns the length of a string")
OP( OP_LOWER,           1, 1, eval_fs1, string_lower, "LOWER(text)", "Converts a specified string to lowercase")
OP( OP_MID,             3, 3, eval_mid, NULL, "MID(string, starting_at, extract_length)", "Returns a segment of a string")
OP( OP_PROPER,          1, 1, eval_fs1, string_proper, "PROPER(text_to_capitalize)", "Capitalizes each word in a specified string")
LO( OP_REGEXEXTRACT,    2, 2, NULL, NULL, "REGEXEXTRACT(text, regular_expression)", "Extracts matching substrings according to a regular expression")
LO( OP_REGEXMATCH,      1, 1, NULL, NULL, "REGEXMATCH(text, regular_expression)", "Whether a piece of text matches a regular expression")
LO( OP_REGEXREPLACE,    3, 3, NULL, NULL, "REGEXREPLACE(text, regular_expression, replacement)", "Replaces part of a text string with a different text string using regular expressions")
OP( OP_REPLACE,         4, 4, eval_replace, NULL, "REPLACE(text, position, length, new_text)", "Replaces part of a text string with a different text string")
OP( OP_REPT,            2, 2, eval_rept, NULL, "REPT(text_to_repeat, number_of_repetitions)", "Returns specified text repeated a number of times")
OP( OP_RIGHT,           1, 2, eval_right, NULL, "RIGHT(string, [number_of_characters])", "Returns a substring from the end of a specified string")
OP( OP_SEARCH,          2, 3, eval_find, NULL, "SEARCH(search_for, text_to_search, [starting_at])", "Returns the position at which a string is first found within text")
LO( OP_SPLIT,           2, 4, NULL, NULL, "SPLIT(text, delimiter, [split_by_each], [remove_empty_text])", "Divides text around a specified character or string, and puts each fragment into a separate cell in the row")
OP( OP_SUBSTITUTE,      3, 4, eval_substitute, NULL, "SUBSTITUTE(text_to_search, search_for, replace_with, [occurrence_number])", "Replaces existing text with new text in a string")
OP( OP_T,               1, 1, eval_t, NULL, "T(value)", "Returns string arguments as text")
__( OP_TEXT,            2, 2, NULL, NULL, "TEXT(number, format)", "Converts a number into text according to a specified format")
LO( OP_TEXTJOIN,        3, -1, NULL, NULL, "TEXTJOIN(delimiter, ignore_empty, text1, [text2], ...)", "Combines the text from multiple strings and/or arrays, with a specifiable delimiter separating the different texts.")
OP( OP_TRIM,            1, 1, eval_fs1, string_trim, "TRIM(text)", "Removes leading and trailing spaces in a specified string")
OP( OP_UNICHAR,         1, 1, eval_char, NULL, "UNICHAR(number)", "Returns the Unicode character for a number.")
OP( OP_UNICODE,         1, 1, eval_code, NULL, "UNICODE(text)", "Returns the decimal Unicode value of the first character of the text.")
OP( OP_UPPER,           1, 1, eval_fs1, string_upper, "UPPER(text)", "Converts a specified string to uppercase")

XX( OP_SUBSTR,          3, 3, eval_mid, NULL, "SUBSTR(string, start_char, end_char)", "Extract a portion of a string")

/* SC specific functions */

XX( OP_BLACK,           0, 0, NULL, NULL, "@black", NULL)
XX( OP_BLUE,            0, 0, NULL, NULL, "@blue", NULL)
XX( OP_CYAN,            0, 0, NULL, NULL, "@cyan", NULL)
XX( OP_GREEN,           0, 0, NULL, NULL, "@green", NULL)
XX( OP_MAGENTA,         0, 0, NULL, NULL, "@magenta", NULL)
XX( OP_RED,             0, 0, NULL, NULL, "@red", NULL)
XX( OP_WHITE,           0, 0, NULL, NULL, "@white", NULL)
XX( OP_YELLOW,          0, 0, NULL, NULL, "@yellow", NULL)

#undef OP
#undef XX
#undef __
