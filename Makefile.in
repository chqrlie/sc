# Makefile $Revision: 8.1 $
#
# 1) Select the proper EXDIR (path), MANDIR, MANEXT, LIBDIR, SIGVOID,
#	REGEX, DFLT_PAGER, and FMOD. Most of the other things aren't
#	normally changed (see the comments with each)
# 2) Select the proper machine/compiler/OS section of code
# 3) make install
# 4) If you have the command 'file' that uses /etc/magic add the line:
#	38	string		Spreadsheet	sc file


# Specify the name of the program.
# All documentation and installation keys on this value.
#
name=sc
NAME=SC

# The base directory where everything should be installed.  If you're
# packaging this with an O/S, for example, you'll probably want to change
# this to /usr.  Otherwise, /usr/local is probably more appropriate, unless
# you're replacing the vendor-supplied version.
prefix=/usr/local

# This is where the install step puts it.
EXDIR=${prefix}/bin

# This is where the man page goes.
MANDIR=${prefix}/share/man/man1
MANEXT=1
MANMODE=644

# This is where the library file (tutorial) goes.
#LIBDIR=/usr/local/share/$(name) # reno
LIBDIR=${prefix}/share/$(name)
LIBRARY=-DLIBDIR=\"${LIBDIR}\"

# Set SIMPLE for lex.c if you don't want arrow keys or lex.c blows up
#SIMPLE=-DSIMPLE
SIMPLE=

# Set BROKENCURSES if your curses has the nl/nonl bug
# if it does and you don't set BROKENCURSES, the display will
# be staggered across the screen. Also try IDLOKBAD below.
#BROKENCURSES=-DBROKENCURSES
BROKENCURSES=

# Set USELOCALE to enable country-dependent display of decimal points,
# local character recognition in words, and local @date() format.
#USELOCALE=
USELOCALE=-DUSELOCALE

# Set SIGVOID if signal routines are type void.
# use: SIGVOID=-DSIGVOID for:
#	System 5.3, SunOS 4.X, VMS, BSD4.4 (reno), and ANSI C Compliant systems
# use: SIGVOID=		for:
#  BSD systems (excluding reno, BSD4.4), and the UNIXPC 'cc'
#SIGVOID=
SIGVOID=-DSIGVOID

# Set IEEE_MATH if you need setsticky() calls in your signal handlers
#
#IEEE_MATH=-DIEEE_MATH
IEEE_MATH=

# The -ffloat-store compiler option is necessary for compiling interp.c to
# prevent spurious "Still changing after x iterations" errors, intermittent
# problems with the @round function, comparisons failing when they shouldn't,
# and potentially other similar problems due to FPU registers having greater
# precision than doubles in memory.  This is known to be necessary for GCC
# on x86 processors/FPUs, and probably others.
#FLOAT_STORE=-ffloat-store

# Set RINT=-DRINT if you do not have rint() in math.h
# Set RINT=	on/with (they have rint):
#	SunOS 4.0.3c compiler
#	BSD4.4 (reno)
#RINT=-DRINT
RINT=

# If your system supports POSIX.2 regular expressions, REGEX should be
# set to -DREGCOMP.  Otherwise, set REGEX to -DREGCMP if you have the
# regcmp/regex regular expression routines (most System V based systems
# do) or to -DRE_COMP if you have the re_comp/re_exec regular expression
# routines (most BSD based systems do).  If your system has no support for
# regular expressions, leave REGEX unset.
#REGEX=
#REGEX=-DREGCMP
#REGEX=-DRE_COMP
REGEX=-DREGCOMP

# This is the name of a pager like "more".
# "pg" may be appropriate for SYSV.
#DFLT_PAGER=-DDFLT_PAGER=\"more\"	# generic && reno
DFLT_PAGER=-DDFLT_PAGER=\"less\"

# this is the name to save back ups in
SAVE=-DSAVENAME=\"$(NAME).SAVE\"

# path to crypt, do not define if you don't have crypt
# most systems
#CRYPT=-DCRYPT_PATH=\"/bin/crypt\"
#CRYPT_OBJ=$O/crypt.o
# BSD
# CRYPT=-DCRYPT_PATH=\"/usr/bin/crypt\"
#CRYPT_OBJ=$O/crypt.o
# other people?
#CRYPT=-DCRYPT_PATH=\"/usr/local/bin/crypt\"
#CRYPT_OBJ=$O/crypt.o

# If you get errors about fmod being undefined when you try to
# compile, then define NO_FMOD (most likely BSD4.3 and Mt Xinu).
#FMOD=-DNO_FMOD
FMOD=

# If your system doesn't have notimeout() in curses define NONOTIMEOUT
NO_NOTIMEOUT=-DNONOTIMEOUT
#NO_NOTIMEOUT=

# flags for lint
LINTFLAGS=-abchxv

# Format of quick reference guide generated by $(name)qref
# Leave undefined for normal text output.
#QREF_FMT=
QREF_FMT=-DTROFF

# *** SPECIAL NOTES ***
# For ULTRIX: define the BSD4.2 section and SIGVOID above
#	tdw@cl.cam.ac.uk tested on Ultrix 3.1C-0
# HP-UX 7.0: Do NOT use -O
#	(known broken, try sc's boolean operators if you wish)
#
# **** SYSV curses bugs... ****
# Try setting IDLOKBAD to fix (with an empty spreadsheet):
#	a) Redrawing the bottom half of the screen when you
#		move between row 9 <-> 10
#	b) the highlighted row labels being trash when you
#		move between row 9 <-> 10
#	c) On an xterm on Esix Rev. D+ from eating lines
#		 -goto (or move) a few lines (or more) past the bottom
#		 of the screen, goto (or move) to the top line on the
#		 screen, move upward and the current line is deleted, the
#		 others move up even when they should not, check by
#		 noticing the rows become 2, 3, 40, 41, 42... (etc).
#	Known systems/terminfos w/ curses problems:
#	{Esix Rev. D+, AT&T SysV3.2.1}:at386-m,xterm, HP-UX7.0:(not sure)
#IDLOKISBAD=-DIDLOKBAD
IDLOKISBAD=

# If you don't have idlok() in your curses define NOIDLOK
#NO_IDLOK=-DNOIDLOK
NO_IDLOK=

# If moving right off the screen causes the screen to not redraw
# properly, define RIGHT_CBUG to get around a curses problem on some
# boxes, this forces screen redraws when going right off the screen
#RIGHTBUG=-DRIGHT_CBUG
RIGHTBUG=

# IF you have problems w/ your yacc try bison, Berkeley yacc, or
# some other yacc. Some systems don't allow you to
# increase the number of terminals (mostly AT&T), SCO's does though.
# YACC=yacc
# NOTE: Do not use with bison 1.16! Get a new version....
#YACC=bison -y

YTAB=y.tab

# Extra confuguration:
#NOCRYPT
#NOPLUGINS
#NOPIPES
#NOSHELL
#NOEXTFUNCS

#### SYSTEM DEFINES ####

#########################################
# Use this for system AIX V3.1
#CFLAGS= -O -DSYSV2 -DCHTYPE=int -DNLS
#LDFLAGS=
#LDADD=-lm -lPW -lcurses

#########################################
# Use this for system V.2 (includes: HP-UX 7.05, UNIXPC)
#CFLAGS= -O -DSYSV2
#LDFLAGS=
#LDADD=-lm -lPW -lcurses
# with gcc on a Sequent also use:
#CC=att gcc
#CFLAGS=  -DSYSV2 -g -pipe -traditional

#########################################
# Use this for system V.3
#CFLAGS=  -DSYSV3 -O
#LDFLAGS= -s
#CFLAGS=  -DSYSV3 -g
#LDFLAGS= -g
#LDADD=-lm -lncurses -lfl
# with gcc also use:
#CC=gcc
#CFLAGS=  -DSYSV3 -O -pipe
# debugging bison (bison 1.16 is broken)
#CFLAGS=  -DSYSV3 -g -pipe -traditional
#YACC=bison -y -v -t -l

#########################################
# Use this for system V.4
#CFLAGS=  -DSYSV4 -DSYSV3 -O
#LDFLAGS= -s
#LDADD=-lm -lcurses -lgen
# with gcc also use:
#CC=gcc
#CFLAGS=  -DSYSV3 -O -pipe

#########################################
# Microport
#CFLAGS= -DSYSV2 -O -DUPORT -Ml
#LDFLAGS=-Ml
#LDADD=-lm -lcurses -lPW

#########################################
# Use this for BSD 4.2
#CFLAGS= -O -DBSD42
#LDFLAGS=
#LDADD=-lm -lcurses -ltermcap
# with gcc also use:
#CC=gcc

#########################################
# Use this for Sequent boxes
#CC=atscc
#CFLAGS=-O -DBSD42
#LDFLAGS=
#LDADD=-lm -lcurses  -ltermcap
#PSCLIB=-lseq
# with gcc also use:
#CC=gcc
#CFLAGS= -O -DBSD42 -pipe

#########################################
# Use this for BSD 4.3
#CFLAGS= -O -DBSD43	#-O or -g
#LDFLAGS=	# -lg might help if -g used in CFLAGS
#LDADD=-lm -lcurses -ltermcap

#########################################
# Use this for SunOS 4.X if you have the System V package installed.
# This will link with the System V curses which is preferable to the
# BSD curses (especially helps scrolling on slow (9600bps or less)
# serial lines).
#
# Be sure to define SIGVOID and REGEX (to -DRE_COMP) above.
#
#CC=/usr/5bin/cc
#CFLAGS= -O -DSYSV3
#LDFLAGS=
#LDADD=-lm -lcurses

#########################################
# Use this for system III (XENIX)
#CFLAGS= -O -DSYSIII
#LDFLAGS= -i
#LDADD=-lm -lcurses -ltermcap

#########################################
# Use this for XENIX Version 2.3
#CFLAGS= -O -DSYSIII -DXENIX2_3
#LDFLAGS= -i
#LDADD=-lm -lcurses -ltermcap

#########################################
# Use this for VENIX
#CFLAGS= -DVENIX -DBSD42 -DV7
#LDFLAGS= -z -i
#LDADD=-lm -lcurses -ltermcap

#########################################
# For SCO Unix V rel. 3.2.0
#       -compile using rcc, cc does not cope with y.tab.c
#       -edit /usr/include/curses.h, rcc does not understand #error
#       -link: make CC=cc, rcc's loader gets unresolved __cclass, __range
#               (rather strange,?)
#CC=rcc
#CC=cc
#CC=gcc -fstrength-reduce
#SIGVOID=-DSIGVOID
#CFLAGS= -O -DSYSV3
#LDFLAGS=
#LDADD=-lm -lcurses -ltinfo -lPW
#YACC=yacc -Sm10000

#########################################
# Use this for SCO Unix 3.2.2 and ODT 1.1
#CC=cc
#CFLAGS= -O -DSYSV3
#LDFLAGS=
#LDADD=-lm -lcurses -lPW -lmalloc -lc_s
#YACC=yacc -Sm10000

#########################################
# Use this for MS-DOS with DJGPP
# REGEX should also be undefined (see above) unless a separate REGEX library
# is installed (gdb includes one, but may result in file conflicts with
# existing DJGPP files).
#CC=gcc
# Only use -Wall for testing, since it produces warnings that are of no
# real effect on the reliability of the program, but may concern some
# people who don't understand them.
#CFLAGS=-DSYSV3 -O2 -Wall
#CFLAGS=-DSYSV3 -O2
#LDADD=-lm -lpdcurses

#########################################
# Use this for OS/X
#__CDBG=-g -O0
#__CLDBG=-g
# define as O:=. for debug build

#########################################
_CFLAGS= $(CFLAGS) $(WARNINGS) $(INCDIR_CURSES) $(DEFINES) $(__CDBG) $(__CLDBG) \
	#-DTRACE='"/tmp/trace.txt"'
_LDFLAGS=$(LDFLAGS) $(__CLDBG)
LDADD=-lm $(LIBDIR_CURSES) $(LIB_CURSES)

# All of the source files for archiving targets (outdated)
SRCS=Makefile abbrev.c cmds.c color.c crypt.c frame.c format.c gram.y \
	help.c interp.c lex.c pipe.c psc.c range.c sc.c sc.h screen.c sort.c \
	util.c version.c vi.c vmtbl.c lotus.c file.c navigate.c print.c

# The objects
OBJS=$O/abbrev.o $O/cmds.o $O/color.o $(CRYPT_OBJ) $O/format.o $O/frame.o $O/gram.o $O/help.o $O/interp.o \
	$O/lex.o $O/pipe.o $O/range.o $O/sc.o $O/screen.o $O/sort.o $O/version.o $O/vi.o $O/vmtbl.o \
	$O/util.o $O/lotus.o $O/file.o $O/navigate.o $O/print.o

# The documents in the Archive
DOCS=CHANGES README sc.doc psc.doc tutorial.sc VMS_NOTES torev build.com

# The header files and other implicit dependency files
DEPENDS:= sc.h config.h compat.h util.h Makefile

all:	Makefile $O $(name) p$(name) $(name)qref $(name).1 p$(name).1 $(name)qref.1 \
	x$(name) x$(name).1

Makefile: Makefile.in configure
	-./configure
	make clean all

.obj:
	mkdir -p $@

$(name): $(PAR) $(OBJS)
	$(CC) $(_CFLAGS) -o $@ ${_LDFLAGS} ${OBJS} $(RPATH_CURSES) ${LDADD}

$(YTAB).h $(YTAB).c: gram.y
	$(YACC) -d gram.y

p$(name): psc.c version.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${_LDFLAGS} psc.c version.c ${PSCLIB}

$(name)qref: help.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ $(_LDFLAGS) -DQREF $(QREF_FMT) -DSCNAME=\"$(NAME)\" help.c

$O/qhelp.o: help.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${CRYPT} -c help.c

# Objects

$O/abbrev.o: abbrev.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${DFLT_PAGER} -c abbrev.c

$O/cmds.o: cmds.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${CRYPT} -c cmds.c

$O/color.o: color.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c color.c

$O/crypt.o: crypt.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${CRYPT} -c crypt.c

$O/file.o: file.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c file.c

$O/format.o: format.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c format.c

$O/frame.o: frame.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c frame.c

tokens.h: gram.y Makefile
	@echo '/* file generated automatically, do not edit */' > $@
	@echo 'static struct key cmdres[] = { // commands' >> $@
	sed -e '/%token.*S_/!d' -e '/%token.*S_\(.*\)/s//	{ "\1", S_\1 },/' < gram.y >> $@
	@echo '    { 0, 0 }' >> $@
	@echo '};' >> $@
	@echo 'static struct key gotores[] = { // goto targets' >> $@
	sed -e '/%token.*GO_/!d' -e '/%token.*GO_\(.*\)/s//	{ "\1", GO_\1 },/' < gram.y >> $@
	@echo '    { 0, 0 }' >> $@
	@echo '};' >> $@
	@echo 'static struct key funcres[] = { // function names' >> $@
	sed -e '/%token.*F_/!d' -e '/%token.*F_\(.*\)/s//	{ "\1", F_\1 },/' < gram.y >> $@
	@echo '    { 0, 0 }' >> $@
	@echo '};' >> $@
	@echo 'static struct key settingres[] = { // settings' >> $@
	sed -e '/%token.*K_/!d' -e '/%token.*K_\(.*\)/s//	{ "\1", K_\1 },/' < gram.y >> $@
	@echo '    { 0, 0 }' >> $@
	@echo '};' >> $@

$O/gram.o: $(YTAB).c $(YTAB).h $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${USELOCALE} -c $(YTAB).c

$O/help.o: help.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${CRYPT} -c help.c

$O/interp.o: interp.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${FLOAT_STORE} ${IEEE_MATH} ${SIGVOID} ${RINT} ${REGEX} ${FMOD} -c interp.c

$O/lex.o: $(YTAB).h $(YTAB).c lex.c $(DEPENDS) $(YTAB).h tokens.h
	$(CC) $(_CFLAGS) -o $@ ${SIMPLE} ${IEEE_MATH} ${LIBRARY} ${SIGVOID} ${NO_NOTIMEOUT} -c lex.c

$O/lotus.o: lotus.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c lotus.c

$O/navigate.o: navigate.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c navigate.c

$O/pipe.o: pipe.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c pipe.c

$O/print.o: print.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c print.c

$O/range.o: range.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c range.c

$O/sc.o: sc.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${DFLT_PAGER} ${SIGVOID} ${SAVE} -c sc.c

$O/screen.o: screen.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${BROKENCURSES} ${IDLOKISBAD} ${RIGHTBUG} ${SIGVOID} ${NO_IDLOK} -c screen.c

$O/sort.o: sort.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c sort.c

$O/util.o: util.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c util.c

$O/version.o: version.c version.h
	$(CC) $(_CFLAGS) -o $@ -c version.c

$O/vi.o: vi.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ ${REGEX} ${HISTORY_FILE} -c vi.c

$O/vmtbl.o: vmtbl.c $(DEPENDS)
	$(CC) $(_CFLAGS) -o $@ -c vmtbl.c

# other stuff

clean:
	rm -rf .obj *.o *res.h $(YTAB).h $(YTAB).c y.output tags debug core

distclean: clean
	rm -f $(name) p$(name) $(name)qref x$(name) Makefile config.log
	rm -f $(name).1 p$(name).1 $(name)qref.1 x$(name).1 compat.h

shar: ${SRCS} ${DOCS}
	shar -c -m 64000 -f shar ${DOCS} ${SRCS}

sshar: ${SRCS}
	shar -c -m 1000000 -f shar ${SRCS}

lint: lintsc lintqref lintpsc

lintsc: $(YTAB).c
	lint ${LINTFLAGS} $(_CFLAGS) ${SIMPLE} \
	    abbrev.c cmds.c color.c crypt.c format.c frame.c help.c interp.c \
	    lex.c pipe.c range.c sc.c screen.c sort.c version.c vi.c vmtbl.c \
	    util.c $(YTAB).c lotus.c file.c navigate.c print.c $(LDADD)

lintqref:
	lint ${LINTFLAGS} $(_CFLAGS) ${SIMPLE} -DQREF help.c

lintpsc:
	lint ${LINTFLAGS} $(_CFLAGS) ${SIMPLE} psc.c

.SUFFIXES: .doc .1

.c.o:
	$(CC) $(_CFLAGS) -c $<

.doc.1:
	name=$(name) NAME=$(NAME) LIBDIR=$(LIBDIR) sh torev $< > $@

install: $(EXDIR)/$(name) $(EXDIR)/$(name)qref $(EXDIR)/p$(name) \
	 $(LIBDIR)/tutorial.$(name) $(MANDIR)/$(name).$(MANEXT) \
	 $(MANDIR)/p$(name).$(MANEXT) $(MANDIR)/$(name)qref.$(MANEXT) \
	 $(EXDIR)/x$(name) $(MANDIR)/x$(name).$(MANEXT)

$(EXDIR)/$(name): $(name) $(EXDIR)
	install $(name) $(EXDIR)/

$(EXDIR)/$(name)qref: $(name)qref $(EXDIR)
	install $(name)qref $(EXDIR)/

$(EXDIR)/p$(name): p$(name) $(EXDIR)
	install p$(name) $(EXDIR)/

$(EXDIR)/x$(name): p$(name) $(EXDIR)
	install x$(name) $(EXDIR)/

x$(name): xsc.sh
	name=$(name) sh torev < xsc.sh > x$(name)

$(LIBDIR)/tutorial.$(name): tutorial.sc $(LIBDIR) $(LIBDIR)/plugins
	install -m $(MANMODE) tutorial.sc $(LIBDIR)/tutorial.$(name)

$(EXDIR):
	mkdir -p $(EXDIR)

$(LIBDIR):
	mkdir -p $(LIBDIR)

$(LIBDIR)/plugins:
	mkdir -p $(LIBDIR)/plugins

$(MANDIR):
	mkdir -p $(MANDIR)

$(MANDIR)/$(name).$(MANEXT): $(MANDIR) $(name).1
	install -m $(MANMODE) $(name).1 $@

$(MANDIR)/p$(name).$(MANEXT): $(MANDIR) p$(name).1
	install -m $(MANMODE) p$(name).1 $@

$(MANDIR)/x$(name).$(MANEXT): $(MANDIR) x$(name).1
	install -m $(MANMODE) x$(name).1 $@

$(MANDIR)/$(name)qref.$(MANEXT): $(MANDIR) $(name)qref.1
	install -m $(MANMODE) $(name)qref.1 $@

uninstall:
	rm -f $(EXDIR)/$(name)
	rm -f $(EXDIR)/$(name)qref
	rm -f $(EXDIR)/p$(name)
	rm -f $(EXDIR)/x$(name)
	rm -rf $(LIBDIR)
	rm -f $(MANDIR)/$(name).$(MANEXT)
	rm -f $(MANDIR)/p$(name).$(MANEXT)
	rm -f $(MANDIR)/$(name)qref.$(MANEXT)

files:
	@find $(DOCS) $(SRCS) -print
